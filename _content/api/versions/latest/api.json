{
  "admin": {
    "admin": {
      "ns": "admin",
      "name": "admin",
      "desc": "Generic admin ui which other admin bundles can hook to.",
      "path": "admin\\admin\\bundle.md",
      "request": [
        {
          "name": "Admin.AddTabRequest",
          "path": "admin/admin/request/Admin.AddTabRequest.md",
          "file": "Admin.AddTabRequest.md",
          "rpc": false,
          "desc": "Requests tab to be added"
        }
      ]
    },
    "admin-announcements": {
      "ns": "admin",
      "name": "admin-announcements",
      "desc": "Admin bundle for making announcements.",
      "path": "admin\\admin-announcements\\bundle.md"
    },
    "admin-layeranalytics": {
      "ns": "admin",
      "name": "admin-layeranalytics",
      "desc": "Admin UI for map layer problem tracker",
      "path": "admin\\admin-layeranalytics\\bundle.md"
    },
    "admin-hierarchical-layerlist": {
      "ns": "admin",
      "name": "admin-hierarchical-layerlist",
      "desc": "This admin bundle extends hierarchical-layerlist for admin tools.",
      "path": "admin\\admin-hierarchical-layerlist\\bundle.md"
    },
    "admin-layerselector": {
      "ns": "admin",
      "name": "admin-layerselector",
      "desc": "Admin tools for managing maplayer configurations",
      "path": "admin\\admin-layerselector\\bundle.md"
    },
    "admin-publish-transfer": {
      "ns": "admin",
      "name": "admin-publish-transfer",
      "desc": "Admin tool for transferring published map configurations from one user to another. Can also be used to edit published map configuration JSON manually. Can only be used for tranfers within one Oskari instance (one server).",
      "path": "admin\\admin-publish-transfer\\bundle.md"
    },
    "admin-users": {
      "ns": "admin",
      "name": "admin-users",
      "desc": "User administration UI",
      "path": "admin\\admin-users\\bundle.md",
      "event": [
        {
          "name": "RoleChangedEvent",
          "path": "admin/admin-users/event/RoleChangedEvent.md",
          "file": "RoleChangedEvent.md",
          "rpc": false,
          "desc": "Event is sent when the role has been added or removed"
        }
      ]
    },
    "admin-layereditor": {
      "ns": "admin",
      "name": "admin-layereditor",
      "desc": "Admin tools for managing maplayer configurations",
      "path": "admin\\admin-layereditor\\bundle.md"
    },
    "appsetup": {
      "ns": "admin",
      "name": "appsetup",
      "desc": "Importing and exporting AppSetups using JSON definition.",
      "path": "admin\\appsetup\\bundle.md"
    }
  },
  "framework": {
    "announcements": {
      "ns": "framework",
      "name": "announcements",
      "desc": "Bundle for displaying announcements made with admin-announcements.",
      "path": "framework\\announcements\\bundle.md"
    },
    "core": {
      "ns": "framework",
      "name": "core",
      "desc": "Provided by the framework",
      "path": "framework\\core\\bundle.md",
      "event": [
        {
          "name": "StateChangedEvent ",
          "path": "framework/core/event/StateSavedEvent.md",
          "file": "StateSavedEvent.md",
          "rpc": true,
          "desc": "Sent after massive application state change occurs."
        }
      ]
    },
    "layerlist": {
      "ns": "framework",
      "name": "layerlist",
      "desc": "A layer listing functionality for the geoportal.",
      "path": "framework\\layerlist\\bundle.md",
      "request": [
        {
          "name": "AddLayerListFilterRequest",
          "path": "framework/layerlist/request/addlayerlistfilterrequest.md",
          "file": "addlayerlistfilterrequest.md",
          "rpc": false,
          "desc": " Filter buttons can be added for layerlist by sending AddLayerListFilterRequest."
        },
        {
          "name": "ShowFilteredLayerListRequest",
          "path": "framework/layerlist/request/showfilteredlayerlistrequest.md",
          "file": "showfilteredlayerlistrequest.md",
          "rpc": false,
          "desc": "Filter layers shown on layerlist."
        }
      ]
    },
    "mydata": {
      "ns": "framework",
      "name": "mydata",
      "desc": "Provides generic container for listing user data and offers other functionalities a way to present user-specific information.",
      "path": "framework\\mydata\\bundle.md"
    },
    "publisher2": {
      "ns": "framework",
      "name": "publisher2",
      "desc": "Allows creation of embedded maps",
      "path": "framework\\publisher2\\bundle.md",
      "subFiles": [
        {
          "docPath": "framework\\publisher2\\tool.md",
          "fileContent": "# Tool\r\n\r\n## Description\r\nTools are used to modify published map view's app setup configuration.\r\nThe Tool component describes how to implement new tools to the publisher.\r\n\r\n## How to use\r\nEach Tool has to implement protocol ```Oskari.mapframework.publisher.Tool``` to be included in the publisher.\r\nTo implement the protocol Tool has to implement following functions.\r\n\r\n### ```init```\r\nReceives object describing the app configuration as a parameter.\r\nInit should read the pdata to see if the tool should be enabled or not.\r\nThen set the initial state for the tool using setEnabled function.\r\n\r\n### ```setEnabled```\r\nDefines what happens when user selects/unselects the tool.\r\n\r\n### ```getValues```\r\nReturns the part of app setup configuration the tool alters.\r\nExample:\r\n```\r\nvar enabled = this.state.enabled;\r\nreturn {\r\n    configuration: {\r\n        statsgrid: {\r\n            conf: {\r\n                allowClassification: enabled,\r\n                legendLocation: 'bottom right'\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n\r\n"
        }
      ],
      "event": [
        {
          "name": "LayerToolsEditModeEvent",
          "path": "framework/publisher2/event/LayerToolsEditModeEvent.md",
          "file": "LayerToolsEditModeEvent.md",
          "rpc": false,
          "desc": "Event is sent when user decides to edit layout order"
        },
        {
          "name": "Publisher.MapPublishedEvent",
          "path": "framework/publisher2/event/Publisher.MapPublishedEvent.md",
          "file": "Publisher.MapPublishedEvent.md",
          "rpc": false,
          "desc": "Used to notify components that a new published map is available."
        },
        {
          "name": "Publisher2.ColourSchemeChangedEvent",
          "path": "framework/publisher2/event/Publisher2.ColourSchemeChangedEvent.md",
          "file": "Publisher2.ColourSchemeChangedEvent.md",
          "rpc": false,
          "desc": "Used to notify getinfo plugin that the colour scheme has changed."
        },
        {
          "name": "Publisher2.FontChangedEvent",
          "path": "framework/publisher2/event/Publisher2.FontChangedEvent.md",
          "file": "Publisher2.FontChangedEvent.md",
          "rpc": false,
          "desc": "Used to notify tool plugins that the font has changed."
        },
        {
          "name": "Publisher2.ToolEnabledChangedEvent",
          "path": "framework/publisher2/event/Publisher2.ToolEnabledChangedEvent.md",
          "file": "Publisher2.ToolEnabledChangedEvent.md",
          "rpc": false,
          "desc": "Used to notify the layout panel that tools have been added / removed from the map"
        },
        {
          "name": "Publisher2.ToolStyleChangedEvent",
          "path": "framework/publisher2/event/Publisher2.ToolStyleChangedEvent.md",
          "file": "Publisher2.ToolStyleChangedEvent.md",
          "rpc": false,
          "desc": "Used to notify tool plugins that the tool style has changed."
        }
      ],
      "request": [
        {
          "name": "Publisher.PublishMapEditorRequest",
          "path": "framework/publisher2/request/Publisher.PublishMapEditorRequest.md",
          "file": "Publisher.PublishMapEditorRequest.md",
          "rpc": false,
          "desc": "Oskari.mapframework.request.Request superclass documents how to send one."
        }
      ]
    },
    "layeranalytics": {
      "ns": "framework",
      "name": "layeranalytics",
      "desc": "Map layer problem tracker",
      "path": "framework\\layeranalytics\\bundle.md"
    },
    "statehandler": {
      "ns": "framework",
      "name": "statehandler",
      "desc": "History functionality and state saving.",
      "path": "framework\\statehandler\\bundle.md",
      "request": [
        {
          "name": "StateHandler.SaveStateRequest",
          "path": "framework/statehandler/request/StateHandler.SaveStateRequest.md",
          "file": "StateHandler.SaveStateRequest.md",
          "rpc": false,
          "desc": "Requests state to be saved"
        },
        {
          "name": "StateHandler.SetStateRequest",
          "path": "framework/statehandler/request/StateHandler.SetStateRequest.md",
          "file": "StateHandler.SetStateRequest.md",
          "rpc": false,
          "desc": "Requests state to be set"
        }
      ],
      "event": [
        {
          "name": "StateSavedEvent",
          "path": "framework/statehandler/event/StateSavedEvent.md",
          "file": "StateSavedEvent.md",
          "rpc": false,
          "desc": "Used to notify that application state has been saved and any listing should refresh"
        }
      ]
    },
    "search": {
      "ns": "framework",
      "name": "search",
      "desc": "Provides basic search functionality without any UI",
      "path": "framework\\search\\bundle.md",
      "event": [
        {
          "name": "SearchResultEvent ",
          "path": "framework/search/event/SearchResultEvent.md",
          "file": "SearchResultEvent.md",
          "rpc": true,
          "desc": "Notifies that a search has been performed and the result is accessible through the event."
        }
      ],
      "request": [
        {
          "name": "SearchRequest ",
          "path": "framework/search/request/SearchRequest.md",
          "file": "SearchRequest.md",
          "rpc": true,
          "desc": "Make a search query"
        }
      ]
    },
    "selected-featuredata": {
      "ns": "framework",
      "name": "selected-featuredata",
      "desc": "Allows infobox opening in new flyout",
      "path": "framework\\selected-featuredata\\bundle.md"
    },
    "usagetracker": {
      "ns": "framework",
      "name": "usagetracker",
      "desc": "Pings the server when any of the configured events occur.",
      "path": "framework\\usagetracker\\bundle.md"
    },
    "rpc": {
      "ns": "framework",
      "name": "rpc",
      "desc": "Provides RPC functionality, i.e. a published map can be controlled from the parent document.",
      "path": "framework\\rpc\\bundle.md"
    }
  },
  "statistics": {
    "statsgrid": {
      "ns": "statistics",
      "name": "statsgrid",
      "desc": "Statistics data display. This will replace the statsgrid bundle specification when the implementation has the comparable functionalities as the current one. The bundle depends on mapstats-bundle that provides support for statslayer layertype.",
      "path": "statistics\\statsgrid\\bundle.md",
      "subFiles": [
        {
          "docPath": "statistics\\statsgrid\\service\\Cache.md",
          "fileContent": "# Oskari.statistics.statsgrid.Cache\r\n\r\nUsed as an internal cache and queue for data retrieval from server.\r\n\r\n## Functions\r\n\r\n### put(key, value)\r\n\r\nSaves the value to a key\r\n\r\n### get(key)\r\n\r\nReturns the value for a key\r\n\r\n### tryCachedVersion(cacheKey, callback)\r\n\r\nTries to find response from cache.\r\nReturns true if cached response was found, callback-function was called and no further processing is needed.\r\n@param  {String}   cacheKey id for the cache\r\n@param  {Function} callback callback to call if there is a cached value\r\n@return {Boolean}  True if cached response was found, callback-function was called and no further processing is needed.\r\n\r\n### addToQueue(key, callback)\r\n\r\nAdds a callback to a response queue.\r\nWhen multiple calls are made to same resource we only want to send one request, queue the callbacks and call all of them when we have a response.\r\n@param {String}   key      id for the queue\r\n@param {Function} callback function to add to the queue\r\n@return {Boolean} true if this was not the first queued callback. True means that request is already in progress and we shouldn't start another, but wait for the response.\r\n\r\n### respondToQueue(key, err, response)\r\n\r\nFinds a queue with the given key and calls the functions that are in the queue with the err and response param values.\r\nClears the queue after so functions are only called once.\r\nAlso caches the response if it's not an error\r\n@param  {String} key      id for the queue\r\n@param  {String} err      Error message when there is one\r\n@param  {Object} response pretty much anything that needs to be passed to the callbacks as result\r\n"
        },
        {
          "docPath": "statistics\\statsgrid\\service\\ClassificationService.md",
          "fileContent": "# Oskari.statistics.statsgrid.ClassificationService\r\n\r\nUsed to classifify data. Limits as to how the classification can be done are found in an limits-property of the service:\r\n\r\n```javascript\r\nlimits : {\r\n    count : {\r\n        min : 2,\r\n        max : 9,\r\n        def : 5\r\n    },\r\n    method : ['jenks', 'quantile', 'equal'],\r\n    mode : ['distinct', 'discontinuous']\r\n}\r\n```\r\n\r\n## Functions\r\n\r\n### getClassification(indicatorData, options)\r\n\r\nClassifies given dataset. Expects data as object like:\r\n {\r\n\tkey1 : 1,\r\n\tkey2 : 3,\r\n\tkey3 : 2\r\n }\r\n\r\nOptions can include:\r\n  {\r\n     count : <number between 2-9 - defaults to 5>,\r\n     method : <one of 'jenks', 'quantile', 'equal' - defaults to 'jenks'>,\r\n     mode : <one of 'distinct', 'discontinuous' - defaults to 'distinct'>,\r\n     precission : <undefined or integer between 0-20 - defaults to undefined>\r\n  }\r\n\r\n\r\nReturns an object like:\r\n {\r\n      bounds : [<classification bounds as numbers like [0,2,5,6]>],\r\n      ranges : [<classification ranges as strings [\"0-2\", \"2-5\", \"5-6\"]>],\r\n      stats : {\r\n          min : <min value in data>,\r\n          max : <max value in data>,\r\n          ...\r\n          mean : <mean value in data>\r\n      },\r\n      getGroups : <function to return keys in data grouped by value ranges, takes an optional param index to get just one group>,\r\n      getIndex : <function to return a group index for data - TODO: is this needed since we have getGroups?>,\r\n      createLegend : <function to create html-legend for ranges, takes colorset and optional title as params>\r\n  }\r\n\r\n```javascript\r\nvar data = {\r\n\tkey1 : 1,\r\n\tkey2 : 3,\r\n\tkey3 : 2\r\n };\r\nvar result = service.getClassification(data, {count : 2});\r\n\r\nvar groups = result.getGroups(); // returns [[key1, key3], [key2]]\r\nvar firstGroup = result.getGroups(0) // returns [key1, key3]\r\nvar theseMatch = groups[0] === firstGroup; // true\r\n\r\n// using the index, we can get group of keys in the same classification group\r\nvar groupIndexForKey2 = result.getIndex(data[key2]) // returns 1\r\nvar groupWithKey2 = result.getGroups(groupIndexForKey2) -> returns [key2]\r\nvar theseMatchAlso = groups[groupIndexForKey2] === groupWithKey2; // true\r\n```"
        },
        {
          "docPath": "statistics\\statsgrid\\service\\ColorService.md",
          "fileContent": "# Oskari.statistics.statsgrid.ColorService\r\n\r\nUsed to get colorset for classified data. Available options for colorsets are found in an limits-property of the service:\r\n\r\n```javascript\r\nlimits : {\r\n    type : ['div', 'seq', 'qual'],\r\n    defaultType : 'div',\r\n    name : [...list of colorset names...],\r\n    defaultName : 'BrBG',\r\n    count : {\r\n        min : 2,\r\n        max : 9\r\n    }\r\n}\r\n```\r\n\r\n## Functions\r\n\r\n### getColorset(count, type, name)\r\n\r\nTries to return an array of colors where length equals count parameter. If such set is not available, returns null if array with requested count is not available. If type or name is given, tries to find closest match, but fallsback to returning the best matching colorset if specific is not found.\r\n@param  {Number} count number of colors requested\r\n@param  {String} type  optional type, supports 'div', 'seq' or 'qual', defaults to 'div'\r\n@param  {String} name  optional name, defaults to 'BrBG'\r\n@return {String[]}     array of hex-strings as colors like [\"d8b365\",\"5ab4ac\"]\r\n\r\n"
        },
        {
          "docPath": "statistics\\statsgrid\\service\\StateService.md",
          "fileContent": "# Oskari.statistics.statsgrid.StateService\r\n\r\nUsed to set and store the state of the statsgrid functionality. Sends out events when the state is changed: indicator added/removed, regionset changed, region selected or active indicator changed."
        },
        {
          "docPath": "statistics\\statsgrid\\service\\StatisticsService.md",
          "fileContent": "# Oskari.statistics.statsgrid.StatisticsService\r\n\r\nUsed to fetch statistics data from the server."
        }
      ],
      "event": [
        {
          "name": "StatsGrid.ActiveIndicatorChangedEvent",
          "path": "statistics/statsgrid/event/StatsGrid.ActiveIndicatorChangedEvent.md",
          "file": "StatsGrid.ActiveIndicatorChangedEvent.md",
          "rpc": false,
          "desc": "Notifies when an indicator has been selected (in grid etc).\nComponents handling indicators should update a \"highlighted\" indicator where needed."
        },
        {
          "name": "StatsGrid.ClassificationChangedEvent",
          "path": "statistics/statsgrid/event/StatsGrid.ClassificationChangedEvent.md",
          "file": "StatsGrid.ClassificationChangedEvent.md",
          "rpc": false,
          "desc": "Notifies when an classification has been changed (in edit classification)."
        },
        {
          "name": "StatsGrid.DatasourceEvent",
          "path": "statistics/statsgrid/event/StatsGrid.DatasourceEvent.md",
          "file": "StatsGrid.DatasourceEvent.md",
          "rpc": false,
          "desc": "Notifies that a datasource has more indicators available (or indicators have been removed)."
        },
        {
          "name": "StatsGrid.IndicatorEvent",
          "path": "statistics/statsgrid/event/StatsGrid.IndicatorEvent.md",
          "file": "StatsGrid.IndicatorEvent.md",
          "rpc": false,
          "desc": "Used to notify that an indicator has been added to or removed from selected indicators."
        },
        {
          "name": "StatsGrid.RegionSelectedEvent",
          "path": "statistics/statsgrid/event/StatsGrid.RegionSelectedEvent.md",
          "file": "StatsGrid.RegionSelectedEvent.md",
          "rpc": false,
          "desc": "Used to notify that a region has been selected in statsgrid.\nComponents handling regions can update \"highlighted\" regions or the latest selection."
        },
        {
          "name": "StatsGrid.RegionsetChangedEvent",
          "path": "statistics/statsgrid/event/StatsGrid.RegionsetChangedEvent.md",
          "file": "StatsGrid.RegionsetChangedEvent.md",
          "rpc": false,
          "desc": "Notifies regionset change"
        }
      ]
    }
  },
  "ui": {
    "divmanazer": {
      "ns": "ui",
      "name": "divmanazer",
      "subFiles": [
        {
          "docPath": "ui\\divmanazer\\accordion.md",
          "fileContent": "# Accordion & AccordionPanel\r\n\r\n## Description\r\n\r\nAn Accordion is a passive vertical container for zero or more AccordionPanels. It simply acts as a placeholder for the AccordionPanels and does not\r\ninterfere with their states apart from being able to toggle the visibility of all the panels.\r\n\r\nAn AccordionPanel consists of a header and a content area. It can be visible or (entirely) hidden and open or closed. When the panel is visible,\r\nthe header is always displayed. When open, the content is rendered underneath it. An icon next to the header shows the current state and acts as\r\nan open/close button.\r\n\r\n## Screenshot\r\n\r\n*Example use from `publisher` bundle*\r\n\r\n![screenshot](accordion.png)\r\n\r\n## How to use\r\n\r\n### Simple accordion\r\n\r\n```javascript\r\nvar accordion = Oskari.clazz.create('Oskari.userinterface.component.Accordion');\r\nvar panelData = [\r\n  {title: 'A panel', content: 'Example panel', isVisible: true, isOpen: true},\r\n  {title: 'Another panel', content: 'Example panel', isVisible: true, isOpen: false}\r\n];\r\nvar panel;\r\nvar i = 0;\r\n\r\nfor (; i < panelData.length; i++) {\r\n  panel = Oskari.clazz.create('Oskari.userinterface.component.AccordionPanel');\r\n  panel.setTitle(panelData[i].title);\r\n  panel.setContent(panelData[i].content);\r\n  panel.setVisible(panelData[i].isVisible);\r\n  panelData[i].isOpen ? panel.open() : panel.close();\r\n  accordion.addPanel(panel);\r\n}\r\naccordion.insertTo(someContainer);\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\badge.md",
          "fileContent": "# Badge\r\n\r\n## Description\r\n\r\nA stylized element for showing values.\r\n\r\n## Usage\r\n\r\n```javascript\r\n    var badge = Oskari.clazz.create('Oskari.userinterface.component.Badge');\r\n    badge.insertTo( someElement );\r\n    badge.setContent( someValue, \"oskari\" );\r\n```\r\nThe second parameter in badge.setContent() is the style param.\r\ni.e.\r\n## Screenshot\r\n\r\n![screenshot](badge.png)"
        },
        {
          "docPath": "ui\\divmanazer\\button.md",
          "fileContent": "# Button\r\n\r\n## Description\r\n\r\nThe button component is defined in divmanazer bundle and provides a generic button ui element.\r\n\r\n## Screenshot\r\n\r\n![screenshot](button.png)\r\n\r\n## How to use\r\n\r\nCreates a button with label \"Alert\" and binds a handler to it that shows an alert when clicked. `addClass('primary')` makes it visually a \"primary\" button (colored blue).\r\n\r\n```javascript\r\nvar alertBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');\r\nalertBtn.addClass('primary');\r\nalertBtn.setTitle('Alert');\r\nalertBtn.setHandler(function() {\r\n  alert('Alert');\r\n});\r\n```\r\n\r\nInserts the button to given element.\r\n\r\n```javascript\r\nvar myUI = jQuery('div.mybundle.buttons');\r\nalertBtn.insertTo(myUI);\r\n```\r\n\r\nRemoves the button.\r\n\r\n```javascript\r\nalertBtn.destroy();\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\chart.md",
          "fileContent": "# Chart\r\n\r\n## Description\r\n\r\nCreate bar or line charts with d3.\r\n\r\n## How to use\r\n\r\nCreates instance of chart class, pass it data in very specific form (array with objects, ie: [{ name: \"\", value: Number }]).\r\nChart returns a div that can be appended where you desire.\r\n```javascript\r\nvar barchart = Oskari.clazz.create('Oskari.userinterface.component.Chart', Oskari.getSandbox());\r\nvar data = [{name:\"2\", value:1},{name:\"1\", value:3},{name:\"11\", value:31},{name:\"12\", value:32},{name:\"13\", value:300},{name:\"14\", value:355},{name:\"15\", value:366},{name:\"16\", value:377}];\r\nvar options = {\r\n    colors: ['#ff0000', '#00ff00'] // also support to use one color --> colors: '#ff0000'\r\n};\r\nbarchart.createBarChart(data, options);\r\njQuery('<div></div>').append(barchart);\r\n\r\n```\r\n\r\nUpdate chart with new data:\r\n```javascript\r\nbarchart.redraw(data, options);\r\n```\r\n\r\nDifferent charts:\r\n```javascript\r\n// bar chart\r\nbarchart.createBarChart(data, options);\r\n// line chart\r\nbarchart.createLineChart(data, options);\r\n```\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\colorselect.md",
          "fileContent": "# ColorSelect\r\n\r\n## Description\r\n\r\nThe color select component is defined in divmanazer bundle and provides a generic color select ui element.\r\n\r\n## Screenshot\r\n\r\n![screenshot](colorselect.png)\r\n\r\n## How to use\r\n\r\nCreates a color selection. Three first are single colors and then use many colors.\r\n\r\n```javascript\r\nvar colorSelect = Oskari.clazz.create('Oskari.userinterface.component.ColorSelect');\r\n\r\ncolorSelect.setColorValues([\r\n    'ff0000',\r\n    '00ff00',\r\n    '0000ff',\r\n    ['ff0000', '00ff00', '0000ff'],\r\n    ['1b9e77','d95f02','7570b3','e7298a','66a61e','e6ab02'],\r\n    ['ffffb2','fed976','feb24c','fd8d3c','f03b20','bd0026']\r\n]);\r\n```\r\n\r\nSets handler for color selection. Handler gives the selected color index.\r\n```javascript\r\ncolorSelect.setHandler(function(selected){\r\n    console.log('Selected index: ' + selected);\r\n});\r\n```\r\n\r\nChange color select visualization.\r\n```javascript\r\ncolorSelect.setUIColors({\r\n    hover: 'FF0000', // menu hover background color\r\n    selected: '00FF00', // selected background color\r\n    menu: '0000FF' // menu background color\r\n});\r\n```\r\n\r\nSelect wanted color index.\r\n```javascript\r\ncolorSelect.setValue(0);\r\n```\r\n\r\nInserts the button to given element.\r\n\r\n```javascript\r\nvar myUI = jQuery('div.mybundle.colorselect');\r\ncolorSelect.insertTo(myUI);\r\n```\r\n\r\nRemoves the color select.\r\n\r\n```javascript\r\ncolorSelect.destroy();\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\extraflyout.md",
          "fileContent": "# ExtraFlyout\r\n\r\n## Description\r\n\r\nThe ExtraFlyout component is defined in divmanazer bundle and provides a generic extra flyout ui element.\r\n\r\n## Screenshot\r\n\r\n![screenshot](extraflyout.png)\r\n\r\n## How to use\r\n\r\nCreates a extra flyout with title \"Alert\", custom CSS style class and size.\r\n\r\n```javascript\r\nvar extraflyout = Oskari.clazz.create('Oskari.userinterface.extension.ExtraFlyout', 'Alert', {\r\n                width: '200px',\r\n                height: '300px',\r\n                cls: 'extra-flyout-css-class'\r\n            });\r\nextraflyout.on('show', function() {\r\n    alert('extra flyout opened');\r\n});\r\nextraflyout.on('hide', function() {\r\n    alert('extra flyout closed');\r\n});\r\n```\r\n\r\nHide extra flyout.\r\n\r\n```javascript\r\nextraflyout.hide();\r\n```\r\n\r\nShow extra flyout.\r\n\r\n```javascript\r\nextraflyout.show();\r\n```\r\n\r\nMake extra flyout draggable.\r\n```javascript\r\nextraFlyout.makeDraggable({\r\n  scroll: false, // Need container auto-scrolls while dragging? Default false.\r\n  handle: '.oskari-flyouttoolbar' // Make dragging for when mousedown triggered with this elemen. Default '.oskari-flyouttoolbar'.\r\n});\r\n```\r\n\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>"
        },
        {
          "docPath": "ui\\divmanazer\\form.md",
          "fileContent": "# Form & FormInput\r\n\r\n## Description\r\n\r\nA Form is a passive container for zero or more FormInputs. It can trigger validation of all contained FormInputs and display and clear any errors\r\nreported by the FI's.\r\n\r\nA FormInput is a smart wrapper for an input, capable of, for example, validating values with regexp, reporting errors and triggering functions on\r\nevents like keypresses and focus changes.\r\n\r\n## Screenshot\r\n\r\n![screenshot](form.png)\r\n\r\n## Usage\r\n\r\n### Simple one-field form\r\n\r\n```javascript\r\nvar form = Oskari.clazz.create('Oskari.userinterface.component.Form');\r\nvar anInput = Oskari.clazz.create('Oskari.userinterface.component.FormInput', 'input');\r\n\r\nanInput.setPlaceholder('Placeholder text');\r\nanInput.setRequired(true, 'Required field');\r\nanInput.setContentCheck(true, 'Input contains illegal characters');\r\nanInput.bindEnterKey(someInputHandler);\r\nform.addField(anInput);\r\nsomeElement.append(form.getForm());\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\grid.md",
          "fileContent": "# Grid & GridModel\r\n\r\n## Description\r\n\r\nA Grid can render a given GridModel as a table. Its features include column aliases, calling external handlers for nested tables, field-specific value renderers,\r\nsorting and selections.\r\n\r\nA GridModel is a simple data container that keeps track of key fields and provides convenience methods for addition of structured data.\r\n\r\n## Screenshot\r\n\r\n![screenshot](grid.png)\r\n\r\n## Usage\r\n\r\n```javascript\r\nvar gridModel = Oskari.clazz.create('Oskari.userinterface.component.GridModel');\r\nvar grid = Oskari.clazz.create('Oskari.userinterface.component.Grid');\r\nvar idRenderer = function(id, data) {\r\n  // set what happens when the 'id' field is clicked\r\n  var idLink = jQuery('<span class=\"idlink\">' + id '</span>');\r\n  idLink.bind('click', function() {\r\n    showDetails(data);\r\n    return false;\r\n  });\r\n  return idLink;\r\n};\r\n\r\nfor (var i = 0; i < dataArray.length; ++i) {\r\n  gridModel.addData(dataArray[i]);\r\n}\r\ngridModel.setIdField('id');\r\ngrid.setDataModel(gridModel);\r\ngrid.setVisibleFields([ 'id', 'afield', 'anotherfield' ]);\r\ngrid.setColumnValueRenderer('id', idRenderer);\r\ngrid.setColumnUIName('afield', localisations.afield);\r\ngrid.setColumnUIName('anotherfield', localisations.anotherfield);\r\n\r\n// If you want use paging you can also define grid for this way\r\n// Set grouping header, only grouping headers allows use paging\r\nme.grid.setGroupingHeader([\r\n    {\r\n        // first grouping cell is same for all others cells, for example same title\r\n        // define grouping cell style class\r\n        cls: 'grouping-header-1',\r\n        // define grouping header text\r\n        text: 'Header 1'\r\n    },\r\n    {\r\n        // this we use at all others than first cell has own grouping header\r\n        // define grouping cell style class\r\n        cls:'grouping-header-2',\r\n        // define grouping header text\r\n        text: 'Header 2',\r\n        // define how many cells is maximum count. If cols are more than this then shows paging arrows\r\n        maxCols: 2,\r\n        /* define paging handler. Handler return text element and data obtains information on paging. data object is following:\r\n        {\r\n          visible: {\r\n            start: 2,\r\n            end: 3\r\n          },\r\n          count: 6,\r\n          page: 1,\r\n          maxPages: 3\r\n        }\r\n        Object tells:\r\n        - visible: tells at showing now cells 2 - 3\r\n        - count: tells at there is 6 cells\r\n        - page: tells at you are now page 1\r\n        - maxPages: tells at there is 3 pages\r\n        */\r\n        pagingHandler: function(element, data){\r\n            element.html('Data ' + '<span>('+data.visible.start + '-' + data.visible.end +'/' + data.count+')</span>');\r\n        }\r\n    }\r\n]);\r\n\r\n\r\ngrid.renderTo(someElement);\r\n\r\n// select row and scroll table to selected\r\nvar scrollableObject = {\r\n  element: jQuery('.scrallobleElement'),\r\n  fixTopPosition: 16 // if need fix calculated top position then use this number. Number means at how many pixels are decreased in calculated element row top location.\r\n  }:\r\ngrid.select(wantedRowValue, false, scrollableObject);\r\n\r\n// select multiple rows and scroll table to selected\r\ngrid.select([wantedRowValue1, wantedRowValue2], false, scrollableElement);\r\n\r\n// moves selected rows as first rows of the table\r\ngrid.moveSelectedRowsTop(true);\r\n\r\n// Resumes current ordering of the rows (if not table is not sorted, rows remain as is)\r\ngrid.moveSelectedRowsTop(false);\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\overlay.md",
          "fileContent": "# Overlay\r\n\r\n## Description\r\n\r\nThe overlay component is defined in divmanazer bundle and provides masking functionality that prevents clicking on something behind the mask.\r\n\r\n## TODO\r\n\r\n* Loadmask message\r\n\r\n## How to use\r\n\r\nMasks the body element and resizes the mask if overlayd elements size changes. `followResizing()` with true parameter uses the browser windows resize event to modify size (doesn't monitor the given elements size change, only window size change).\r\n\r\n```javascript\r\nvar overlay = Oskari.clazz.create('Oskari.userinterface.component.Overlay');\r\noverlay.overlay('body');\r\noverlay.followResizing(true);\r\n```\r\n\r\nClose the overlay after some operation by keeping reference to the overlay component and call `close()`.\r\n\r\n```javascript\r\noverlay.close();\r\n```\r\n\r\nMasks an element with id \"myComponent\".\r\n\r\n```javascript\r\nvar overlay = Oskari.clazz.create('Oskari.userinterface.component.Overlay');\r\noverlay.overlay('#myComponent');\r\n```\r\n\r\nMasks an element with id \"myComponent\". The overlay will detect if the target element size changes and resize itself (`followResizing()`). With `bindClickToClose()` the overlay can be closed by clicking on it.\r\n\r\n```javascript\r\nvar overlay = Oskari.clazz.create('Oskari.userinterface.component.Overlay');\r\noverlay.overlay('#myComponent');\r\noverlay.followResizing();\r\noverlay.bindClickToClose();\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\popup.md",
          "fileContent": "# Popup\r\n\r\n## Description\r\n\r\nThe popup component is defined in divmanazer bundle and provides basic popup functionality. It can be used to show messages that will be shown for given time before removing and messages that user needs to react to by clicking a button. It can also be used in a modal mode (uses the Overlay component internally) and it can be used to show for example a form for user input. The popup can be associated with a given element so it will point at the element or as generic location on the middle of the screen.\r\n\r\n## TODO\r\n\r\n* Intelligent placement when associated to element so dialog doesn't go off-screen\r\n\r\n## Screenshot\r\n\r\n![screenshot](popup.png)\r\n\r\n## How to use\r\n\r\nShows popup at the middle of the screen and closes automatically after 3 seconds. The fadeout method can be given the time as parameter but defaults to 3000 milliseconds.\r\n\r\n```javascript\r\nvar dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');\r\ndialog.show(\"Note\", \"Something happened\");\r\ndialog.fadeout();\r\n```\r\n\r\nShows popup at the middle of the screen and closes when the user clicks the ok button on the popup. addClass is used to make the button visually \"primary\" (colored blue). `createCloseButton()` is a convenience method that just creates and returns a Oskari.userinterface.component.Button which is binded to close the dialog on click.\r\n\r\n```javascript\r\nvar dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');\r\nvar btn = dialog.createCloseButton(\"OK\");\r\nbtn.addClass('primary');\r\ndialog.show(\"Note\", \"Click OK to close\", [btn]);\r\n```\r\n\r\nShows popup at the middle of the screen and closes when the user clicks the ok button on the popup. Here we create a custom `Oskari.userinterface.component.Button` and asign a handler function for it which closes the dialog and shows an alert. We also make the dialog modal by calling its `makeModal()` method.\r\n\r\n```javascript\r\nvar dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');\r\nvar btn = dialog.createCloseButton(\"OK\");\r\nvar alertBtn = Oskari.clazz.create('Oskari.userinterface.component.Button');\r\n\r\nbtn.addClass('primary');\r\nalertBtn.setTitle('Alert');\r\nalertBtn.setHandler(function() {\r\n  dialog.close();\r\n  alert('Alert');\r\n});\r\ndialog.show(\"Note\", \"Click OK to close and alert for an alert\", [alertBtn, btn]);\r\ndialog.makeModal();\r\n```\r\n\r\nShows popup above (we give it alignment \"top\") a DOM element with id \"myComponent\" and closes automatically after 3 seconds.\r\n\r\n```javascript\r\nvar dialog = Oskari.clazz.create('Oskari.userinterface.component.Popup');\r\ndialog.show(\"Note\", \"Something happened at this component\");\r\ndialog.moveTo(jQuery('#myComponent'), 'top');\r\ndialog.fadeout();\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Oskari overlay component](/documentation/bundles/framework/divmanazer/overlay) </td>\r\n    <td> Expects to be present in application setup </td>\r\n    <td> Used on `makeModal()` call to overlay the window. </td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Oskari button component](/documentation/bundles/framework/divmanazer/button) </td>\r\n    <td> Expects to be present in application setup </td>\r\n    <td> Used on `createCloseButton()` call to create a button. </td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\tabpanel.md",
          "fileContent": "# TabPanel, TabContainer & TabDropdownContainer\r\n\r\n## Description\r\n\r\nA TabPanel is a wrapper for a title, a header and content (html) and can call a handler when the tab is selected or unselected.\r\n\r\nA TabContainer renders TabPanels as selectable tabs whereas a TabDropdownContainer represents the TabPanel collection as a dropdown list. A callback for panel changes can be registered for both.\r\n\r\n## Screenshot\r\n\r\n![screenshot](tabcontainer.png)\r\n![screenshot](tabdropdowncontainer.png)\r\n\r\n## Usage\r\n\r\n### Simple TabContainer\r\n\r\n```javascript\r\nvar aPanel = Oskari.clazz.create('Oskari.userinterface.component.TabPanel');\r\nvar anotherPanel = Oskari.clazz.create('Oskari.userinterface.component.TabPanel');\r\nvar container = null;\r\n\r\naPanel.setTitle('A TabPanel');\r\naPanel.setContent(someHtml);\r\nanotherPanel.setTitle('Another TabPanel');\r\nanotherPanel.setContent(someMoreHtml);\r\nif (useDropDown) {\r\n  container = Oskari.clazz.create('Oskari.userinterface.component.TabDropdownContainer', 'A TabDropdownContainer');\r\n} else {\r\n  container = Oskari.clazz.create('Oskari.userinterface.component.TabContainer', 'A TabContainer');\r\n}\r\ncontainer.addPanel(aPanel);\r\ncontainer.addPanel(anotherPanel);\r\ncontainer.insertTo(someElement);\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\uihelper.md",
          "fileContent": "# UI Helper\r\n\r\n## Description\r\n\r\nProcesses given element and binds any element with \"helptags\" attribute with a popup showing the help article\r\n\r\n## Usage\r\n\r\nThere is two way of adding help links. You can let the UIHelper to process your content and based on HTML classes (icon-info) it will add the helper functionality using popups.\r\n```javascript\r\nvar helper = Oskari.clazz.create('Oskari.userinterface.component.UIHelper', this.instance.sandbox);\r\n//processHelpLinks(title, content, errorTitle, errorMsg)\r\nhelper.processHelpLinks(this.loc.help, content, this.loc.error.title, this.loc.error.nohelp);\r\n```\r\n\r\nAnother way is to fetch help articles from the backend and show those articles when needed.\r\n```javascript\r\nvar me = this;\r\nvar helper = Oskari.clazz.create('Oskari.userinterface.component.UIHelper', me.instance.sandbox);\r\nhelper.getHelpArticle('termsofuse, mappublication, ' + Oskari.getLang(), function(success, response) {\r\n    if(success) {\r\n        me.termsOfUse = response;\r\n        // terms loaded, try again\r\n        me._showTermsOfUse();\r\n    }\r\n});\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "ui\\divmanazer\\visualizationform.md",
          "fileContent": "# VisualizationForm\r\n\r\n## Description\r\n\r\nCreates ui and functionality to define geometry visualizations for eg. my places bundle.\r\n\r\n## Screenshot\r\n\r\n![Form](visualization-form_1.png)\r\n\r\n## Usage\r\n\r\nClass creation (parameters are discussed below):\r\n\r\n```javascript\r\nvar options = {...};\r\nvar visualizationForm = Oskari.clazz.create(\r\n    \"Oskari.userinterface.component.VisualizationForm\",\r\n    options\r\n);\r\n```\r\n\r\nAfter initializing the class, the form can be placed on the DOM:\r\n\r\n```javascript\r\nvar form = visualizationForm.getForm();\r\nsomeDomElement.append(form);\r\n```\r\n\r\nThe values of the form can then be requested (returns an object which has keys for each of the form components given in initialization options, or all three by default):\r\n\r\n```javascript\r\nvar values = visualizationForm.getValues();\r\nconsole.log(values);\r\n```\r\n\r\nOutputs for instance:\r\n\r\n```javascript\r\n{\r\n  area: {\r\n    fillColor: \"ffde00\"\r\n    fillStyle: -1\r\n    lineColor: \"000000\"\r\n    lineCorner: \"mitre\"\r\n    lineStyle: \"\"\r\n    lineWidth: 1\r\n  },\r\n  line: {\r\n    cap: \"butt\"\r\n    color: \"3233ff\"\r\n    corner: \"mitre\"\r\n    style: \"\"\r\n    width: 1\r\n  },\r\n  point: {\r\n    color: \"000000\"\r\n    shape: 1\r\n    size: 3\r\n  }\r\n}\r\n```\r\n\r\n`area.fillColor` and `area.lineColor` can have value `null` to mean \"no fill\" / \"no stroke\" respectively\r\n\r\nThe component also accepts values with similar structure as above:\r\n\r\n```javascript\r\nvar values = {...};\r\nvisualizationForm.setValues(values);\r\n```\r\n\r\n## Configuration options\r\n\r\nTakes one (optional) parameter, `options`. In case it is omitted, the component uses some sensible defaults.\r\n\r\n`options` should have two keys, `forms`, whose value should be an array of strings, for instance:\r\n\r\n```javascript\r\n// includes all three by default. Can be configured to include any combination of the three.\r\n['point', 'line', 'area']\r\n```\r\n\r\nThe other `options` key should be `formValues` which defines default values to each form. Example:\r\n\r\n```javascript\r\n// These are the default values of the component:\r\nformValues: {\r\n    point: {\r\n        shape: 1,\r\n        color: \"000000\",\r\n        size: 3\r\n    },\r\n    line: {\r\n        style: 0,\r\n        cap: 0,\r\n        corner: 0,\r\n        width: 1,\r\n        color: \"3233ff\"\r\n    },\r\n    area: {\r\n        line: {\r\n            width: 1,\r\n            corner: 0,\r\n            style: 0,\r\n            color: \"000000\"\r\n        },\r\n        fill: {\r\n            style: -1,\r\n            color: \"ffde00\"\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the component UI from begin to end</td>\r\n  </tr>\r\n</table>\r\n"
        }
      ],
      "desc": "Manages menutiles, flyouts and other UI related funtionalities for other bundles to use. Also provides UI components. The tiles are rendered to a HTML element with id \"menubar\". The bundle doesn't create it but assumes it exists on the page.",
      "path": "ui\\divmanazer\\bundle.md",
      "event": [
        {
          "name": "UIChangeEvent",
          "path": "ui/divmanazer/event/UIChangeEvent.md",
          "file": "UIChangeEvent.md",
          "rpc": false,
          "desc": "Notifies major UI changes where some functionalities should clean up/shutdown their own UI."
        },
        {
          "name": "userinterface.ExtensionUpdatedEvent",
          "path": "ui/divmanazer/event/userinterface.ExtensionUpdatedEvent.md",
          "file": "userinterface.ExtensionUpdatedEvent.md",
          "rpc": false,
          "desc": "Sent after Extension view state has changed"
        }
      ],
      "request": [
        {
          "name": "userinterface.AddExtensionRequest",
          "path": "ui/divmanazer/request/userinterface.AddExtensionRequest.md",
          "file": "userinterface.AddExtensionRequest.md",
          "rpc": false,
          "desc": "Extends the basic UI view"
        },
        {
          "name": "userinterface.ModalDialogRequest",
          "path": "ui/divmanazer/request/userinterface.ModalDialogRequest.md",
          "file": "userinterface.ModalDialogRequest.md",
          "rpc": false,
          "desc": "Request for UI modal dialog"
        },
        {
          "name": "userinterface.RemoveExtensionRequest",
          "path": "ui/divmanazer/request/userinterface.RemoveExtensionRequest.md",
          "file": "userinterface.RemoveExtensionRequest.md",
          "rpc": false,
          "desc": "Unregisters the extensions when the bundle gets stopped"
        },
        {
          "name": "userinterface.UpdateExtensionRequest",
          "path": "ui/divmanazer/request/userinterface.UpdateExtensionRequest.md",
          "file": "userinterface.UpdateExtensionRequest.md",
          "rpc": false,
          "desc": "Updates the extended UI view"
        }
      ]
    },
    "guidedtour": {
      "ns": "ui",
      "name": "guidedtour",
      "desc": "Shows a series of dialogs on startup to instruct user on map functionalities. The content of the dialogs is supplied from the bundles that the guided tour describes. Any bundle can register itself to the guided tour.",
      "path": "ui\\guidedtour\\bundle.md",
      "request": [
        {
          "name": "Guidedtour.AddToGuidedTourRequest",
          "path": "ui/guidedtour/request/addtoguidedtourrequest.md",
          "file": "addtoguidedtourrequest.md",
          "rpc": false,
          "desc": "Add guide to guided tour."
        }
      ]
    },
    "infobox": {
      "ns": "ui",
      "name": "infobox",
      "desc": "Provides functionality for other bundles to show an infobox on the map. For example information about a search result. Defines a plugin for mapmodule that handles the infobox as an Openlayers popup with customized UI. Also extends jQuery by an outerHtml method. Templates are created with jQuery but Openlayers popup needs the actual HTML, this is where we need outerHtml.",
      "path": "ui\\infobox\\bundle.md",
      "event": [
        {
          "name": "InfoBox.InfoBoxEvent ",
          "path": "ui/infobox/event/InfoBox.InfoBoxEvent.md",
          "file": "InfoBox.InfoBoxEvent.md",
          "rpc": true,
          "desc": "Used to notify that infobox has been closed."
        },
        {
          "name": "InfoboxActionEvent ",
          "path": "ui/infobox/event/infoboxactionevent.md",
          "file": "infoboxactionevent.md",
          "rpc": true,
          "desc": "Used to notify which link/button is clicked in the infobox."
        }
      ],
      "request": [
        {
          "name": "InfoBox.HideInfoBoxRequest ",
          "path": "ui/infobox/request/infobox.hideinfoboxrequest.md",
          "file": "infobox.hideinfoboxrequest.md",
          "rpc": true,
          "desc": "Hide infobox from the map."
        },
        {
          "name": "InfoBox.RefreshInfoBoxRequest",
          "path": "ui/infobox/request/infobox.refreshinfoboxrequest.md",
          "file": "infobox.refreshinfoboxrequest.md",
          "rpc": false,
          "desc": "Refreshes the requested infobox/popup if present"
        },
        {
          "name": "InfoBox.ShowInfoBoxRequest ",
          "path": "ui/infobox/request/infobox.showinfoboxrequest.md",
          "file": "infobox.showinfoboxrequest.md",
          "rpc": true,
          "desc": "Show infobox on map."
        }
      ]
    },
    "search": {
      "ns": "ui",
      "name": "search",
      "desc": "Provides a generic and extensible search user-interface",
      "path": "ui\\search\\bundle.md",
      "event": [
        {
          "name": "Search.TabChangedEvent",
          "path": "ui/search/event/Search.TabChangedEvent.md",
          "file": "Search.TabChangedEvent.md",
          "rpc": false,
          "desc": "Notify metadatacatalogue that the tab has changed"
        }
      ],
      "request": [
        {
          "name": "Search.AddTabRequest",
          "path": "ui/search/request/Search.AddTabRequest.md",
          "file": "Search.AddTabRequest.md",
          "rpc": false,
          "desc": "Requests a tab to be added"
        },
        {
          "name": "Search.RemoveSearchResultActionRequest",
          "path": "ui/search/request/Search.RemoveSearchResultActionRequest.md",
          "file": "Search.RemoveSearchResultActionRequest.md",
          "rpc": false,
          "desc": "Requests a search result action to be removed"
        }
      ]
    },
    "ui-components": {
      "ns": "ui",
      "name": "ui-components",
      "desc": "Imports user interface components from divmanazer (eg. Popup, Grid) to be used without initializing the divmanazer bundle. Used mostly in published map where the aforementioned bundle is not imported.",
      "path": "ui\\ui-components\\bundle.md"
    },
    "userguide": {
      "ns": "ui",
      "name": "userguide",
      "desc": "Creates the Userguide flyout with title and content. ",
      "path": "ui\\userguide\\bundle.md",
      "request": [
        {
          "name": "userguide.ShowUserGuideRequest",
          "path": "ui/userguide/request/userguide.ShowUserGuideRequest.md",
          "file": "userguide.ShowUserGuideRequest.md",
          "rpc": false,
          "desc": "Shows additional data in user guide"
        }
      ]
    },
    "toolbar": {
      "ns": "ui",
      "name": "toolbar",
      "desc": "Generic and extensible toolbar implementation",
      "path": "ui\\toolbar\\bundle.md",
      "event": [
        {
          "name": "Toolbar.ToolbarLoadedEvent",
          "path": "ui/toolbar/event/Toolbar.ToolbarLoadedEvent.md",
          "file": "Toolbar.ToolbarLoadedEvent.md",
          "rpc": false,
          "desc": "Used to notify components that the toolbar has been loaded and is available for tool button addition requests."
        },
        {
          "name": "Toolbar.ToolSelectedEvent",
          "path": "ui/toolbar/event/Toolbar.ToolSelectedEvent.md",
          "file": "Toolbar.ToolSelectedEvent.md",
          "rpc": false,
          "desc": "Used to notify components that a tool has been selected and components should cancel their tool related operations if any."
        }
      ],
      "request": [
        {
          "name": "Toolbar.AddToolButtonRequest",
          "path": "ui/toolbar/request/Toolbar.AddToolButtonRequest.md",
          "file": "Toolbar.AddToolButtonRequest.md",
          "rpc": false,
          "desc": "Requests for toolbar to add button with given config"
        },
        {
          "name": "Toolbar.RemoveToolButtonRequest",
          "path": "ui/toolbar/request/Toolbar.RemoveToolButtonRequest.md",
          "file": "Toolbar.RemoveToolButtonRequest.md",
          "rpc": false,
          "desc": "Requests for toolbar to remove button with given id/group"
        },
        {
          "name": "Toolbar.SelectToolButtonRequest",
          "path": "ui/toolbar/request/Toolbar.SelectToolButtonRequest.md",
          "file": "Toolbar.SelectToolButtonRequest.md",
          "rpc": false,
          "desc": "Requests for toolbar to act as if user had clicked a button or returns a default tool if create params aren't given."
        },
        {
          "name": "Toolbar.ToolbarRequest",
          "path": "ui/toolbar/request/Toolbar.ToolbarRequest.md",
          "file": "Toolbar.ToolbarRequest.md",
          "rpc": false,
          "desc": "Requests for toolbar to create/show/hide/remove a toolbar."
        },
        {
          "name": "Toolbar.ToolButtonStateRequest",
          "path": "ui/toolbar/request/Toolbar.ToolButtonStateRequest.md",
          "file": "Toolbar.ToolButtonStateRequest.md",
          "rpc": false,
          "desc": "Requests for toolbar to enable/disable a button."
        }
      ]
    }
  },
  "mapping": {
    "analyse": {
      "ns": "mapping",
      "name": "analyse",
      "desc": "Bundle manages analyse parameter and data setups, requests analyse execute actions and stores analyse results to DB through backend action route.",
      "path": "mapping\\analyse\\bundle.md"
    },
    "coordinatedisplay": {
      "ns": "mapping",
      "name": "coordinatedisplay",
      "desc": "This bundle provides a plugin (Oskari.mapframework.bundle.coordinatedisplay.plugin.CoordinatesPlugin) for mapmodule that shows coordinates on mouse location.",
      "path": "mapping\\coordinatedisplay\\bundle.md"
    },
    "coordinatetool": {
      "ns": "mapping",
      "name": "coordinatetool",
      "desc": "This bundle provides a plugin (Oskari.mapframework.bundle.coordinatetool.plugin.CoordinateToolPlugin) for mapmodule that can:",
      "path": "mapping\\coordinatetool\\bundle.md"
    },
    "drawtools": {
      "ns": "mapping",
      "name": "drawtools",
      "desc": "Allows user to draw feature geometries on map.",
      "path": "mapping\\drawtools\\bundle.md",
      "request": [
        {
          "name": "StartDrawingRequest ",
          "path": "mapping/drawtools/request/startdrawingrequest.md",
          "file": "startdrawingrequest.md",
          "rpc": true,
          "desc": "Allows the user to draw on the map."
        },
        {
          "name": "StopDrawingRequest ",
          "path": "mapping/drawtools/request/stopdrawingrequest.md",
          "file": "stopdrawingrequest.md",
          "rpc": true,
          "desc": "Used to complete or clear the drawing."
        }
      ],
      "event": [
        {
          "name": "DrawingEvent ",
          "path": "mapping/drawtools/event/DrawingEvent.md",
          "file": "DrawingEvent.md",
          "rpc": true,
          "desc": "Notifies that sketch has been changed or drawing is finished."
        }
      ]
    },
    "backendstatus": {
      "ns": "mapping",
      "name": "backendstatus",
      "desc": "Polls a backend system for map layers monitoring statuses and informs interested parties via an event.",
      "path": "mapping\\backendstatus\\bundle.md",
      "event": [
        {
          "name": "BackendStatus.BackendStatusChangedEvent",
          "path": "mapping/backendstatus/event/BackendStatus.BackendStatusChangedEvent.md",
          "file": "BackendStatus.BackendStatusChangedEvent.md",
          "rpc": false,
          "desc": "Event is sent when the backend status of a map layer has changed."
        }
      ]
    },
    "featuredata": {
      "ns": "mapping",
      "name": "featuredata",
      "desc": "The Bundle provides a grid view for vector layers' object data.",
      "path": "mapping\\featuredata\\bundle.md",
      "event": [
        {
          "name": "WFSSetFilter",
          "path": "mapping/featuredata/event/WFSSetFilter.md",
          "file": "WFSSetFilter.md",
          "rpc": false,
          "desc": "Notifies that a GeoJSON geometry filter has been set"
        },
        {
          "name": "WFSSetPropertyFilter",
          "path": "mapping/featuredata/event/WFSSetPropertyFilter.md",
          "file": "WFSSetPropertyFilter.md",
          "rpc": false,
          "desc": "Notifies that a WFS feature properties filter has been set"
        }
      ],
      "request": [
        {
          "name": "ShowFeatureDataRequest",
          "path": "mapping/featuredata/request/ShowFeatureDataRequest.md",
          "file": "ShowFeatureDataRequest.md",
          "rpc": false,
          "desc": "Requests a WFS feature data to be shown"
        }
      ]
    },
    "feedbackService": {
      "ns": "mapping",
      "name": "feedbackService",
      "desc": "Provides a Oskari request/event API for listing and posting feedback to Open311-based service. Requires server-side functionality from oskari-server and configuration for the view/app on the server. Configuration fields are provided in the publisher tool.",
      "path": "mapping\\feedbackService\\bundle.md",
      "event": [
        {
          "name": "FeedbackResultEvent ",
          "path": "mapping/feedbackService/event/feedbackresultevent.md",
          "file": "feedbackresultevent.md",
          "rpc": true,
          "desc": "Notifies that feedback request response has been got from the service. Includes the response data."
        }
      ],
      "request": [
        {
          "name": "GetFeedbackRequest ",
          "path": "mapping/feedbackService/request/getfeedbackrequest.md",
          "file": "getfeedbackrequest.md",
          "rpc": true,
          "desc": "Get feedbacks from feedback service (Open311)."
        },
        {
          "name": "GetFeedbackServiceRequest ",
          "path": "mapping/feedbackService/request/getfeedbackservicerequest.md",
          "file": "getfeedbackservicerequest.md",
          "rpc": true,
          "desc": "Get feedback service list or metadata of single service (if id is given) from feedback service (Open311)."
        },
        {
          "name": "PostFeedbackRequest ",
          "path": "mapping/feedbackService/request/postfeedbackrequest.md",
          "file": "postfeedbackrequest.md",
          "rpc": true,
          "desc": "Posts user's feedback data to feedback service (Open311)."
        }
      ]
    },
    "findbycoordinates": {
      "ns": "mapping",
      "name": "findbycoordinates",
      "desc": "Creates a service and a user interface for searching nearest address on a map and adds a button to the toolbar for reverse geocode search. Requires server side functionality.",
      "path": "mapping\\findbycoordinates\\bundle.md"
    },
    "geometrycutter": {
      "ns": "mapping",
      "name": "geometrycutter",
      "desc": "The bundle provides tools for geometry editing. Currently supported functionality includes spliting Polygon or LineString with user drawn LineString and clipping any geometry with user drawn Polygon.",
      "path": "mapping\\geometrycutter\\bundle.md",
      "event": [
        {
          "name": "GeometryCuttingEvent",
          "path": "mapping/geometrycutter/event/GeometryCuttingEvent.md",
          "file": "GeometryCuttingEvent.md",
          "rpc": false,
          "desc": "Sent when any of the following happens:"
        }
      ],
      "request": [
        {
          "name": "StartGeometryCuttingRequest",
          "path": "mapping/geometrycutter/request/StartGeometryCuttingRequest.md",
          "file": "StartGeometryCuttingRequest.md",
          "rpc": false,
          "desc": "Starts cutting the supplied feature as target."
        },
        {
          "name": "StopGeometryCuttingRequest",
          "path": "mapping/geometrycutter/request/StopGeometryCuttingRequest.md",
          "file": "StopGeometryCuttingRequest.md",
          "rpc": false,
          "desc": "Stops cutting."
        }
      ]
    },
    "heatmap": {
      "ns": "mapping",
      "name": "heatmap",
      "desc": "Adds heatmap functionality to layers configured to support it (WMS-layers only at the moment). Configuration is done by adding the following information to a layers JSON:",
      "path": "mapping\\heatmap\\bundle.md"
    },
    "mapanalysis": {
      "ns": "mapping",
      "name": "mapanalysis",
      "desc": "Adds support for analysis layers. The analysisLayerPlugin needs to be registered for the map in order to visualize analysis layers",
      "path": "mapping\\mapanalysis\\bundle.md"
    },
    "mapfull": {
      "ns": "mapping",
      "name": "mapfull",
      "desc": "Initializes Oskari core with Oskari.mapframework.service.MapLayerService, starts up Oskari.mapframework.ui.module.common.MapModule and renders the map to a HTML element with id \"mapdiv\".",
      "path": "mapping\\mapfull\\bundle.md"
    },
    "mapmodule": {
      "ns": "mapping",
      "name": "mapmodule",
      "subFiles": [
        {
          "docPath": "mapping\\mapmodule\\backgroundlayerselectorplugin.md",
          "fileContent": "# Background Layer Selection Plugin\r\n\r\n## Description\r\n\r\nThis plugin provides a background maplayer selection \"dropdown\" on top of the map.\r\n\r\n## Screenshot\r\n\r\n## Closed\r\n\r\n![closed](images/backgroundlayerselection_closed.png)\r\n\r\n## Open\r\n\r\n![open](images/backgroundlayerselection_open.png)\r\n\r\n## List\r\n\r\n![list](images/backgroundlayerselection_list.png)\r\n\r\n## Bundle configuration\r\n\r\n```javascript\r\n{\r\n  \"baseLayers\" : [\"<layerid 1>\",\"<layerid 2>\",\"<layerid 3>\"\"],\r\n  \"showAsDropdown\" : <true/false>\r\n}\r\n```\r\n\r\nConfiguration is required to define the preset background layers.\r\n\r\nUI can be presented as a button bar or a dropdown, this is controlled with `showAsDropdown`, which defaults to false.\r\n\r\nThe font and colour scheme of the plugin are configurable, with variables `font` (String) and `colorScheme` (Object) respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. The `colorScheme` object should have keys `buttonColor`, `buttonBackgroundColor`, `buttonSelectedColor`, `buttonSelectedBackgroundColor` and `buttonBorderColor`.\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.RemoveMapLayerRequest</td>\r\n    <td>Remove old background layer selection</td>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.AddMapLayerRequest</td>\r\n    <td>Add new background layer selection</td>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.RearrangeSelectedMapLayerRequest</td>\r\n    <td>Move bg layer to bottom</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Oskari.mapframework.event.common.AfterRearrangeSelectedMapLayerEvent</td>\r\n    <td>Update selection, bottom baselayer might've changed</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Oskari.mapframework.event.common.AfterMapLayerRemoveEvent</td>\r\n    <td>Redo ui, one of the preset bg layers might've been deleted</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Oskari.mapframework.event.common.AfterMapLayerAddEvent</td>\r\n    <td>Redo ui, we might've gotten a previously missing preset bg layer</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Oskari.mapframework.event.common.MapLayerEvent</td>\r\n    <td>Redo ui, we might've gotten a previously missing preset bg layer</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked (on page locally in portal) </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\controls.md",
          "fileContent": "# Controls Plugin\r\n\r\n## Description\r\n\r\nControlsPlugin adds zoombox, measure, keyboard and mouse controls to the map.\r\n\r\n## Bundle configuration\r\n\r\nMap controls are configurable - setting the control values as false the control is not added. All controls are added by default if not explicitly configured.\r\n\r\n```javascript\r\n{\r\n  \"conf\": {\r\n    \"zoomBox\" : false,\r\n    \"measureControls\" : false,\r\n    \"keyboardControls\" : false,\r\n    \"mouseControls\" : false\r\n  }\r\n}\r\n```\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented.\r\n\r\n## Requests the bundle handles\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>ToolSelectionRequest</td><td>Activates requested control</td>\r\n  </tr>\r\n  <tr>\r\n    <td>EnableMapKeyboardMovementRequest</td><td>Enables keyboard movement (if it isn't configured otherwise)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>DisableMapKeyboardMovementRequest</td><td>Disables keyboard movement</td>\r\n  </tr>\r\n  <tr>\r\n    <td>EnableMapMouseMovementRequest</td><td>Enables mouse movement (if it isn't configured otherwise)</td>\r\n  </tr>\r\n  <tr>\r\n    <td>DisableMapMouseMovementRequest</td><td>Disables mouse movement</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n## Requests the bundle sends out\r\n\r\nThis bundle doesn't send out any requests.\r\n\r\n## Events the bundle listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>Toolbar.ToolSelectedEvent</td><td>Disables zoom/measure controls</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n## Events the bundle sends out\r\n\r\nThis bundle doesn't send out any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [Oskari mapmodule](/documentation/bundles/framework/mapmodule) </td>\r\n    <td> Expects to be present in application setup </td>\r\n    <td> Controls will be added to map module </td>\r\n  </tr>\r\n</table>\r\n\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\datasource.md",
          "fileContent": "# Data Source Plugin\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <td>API</td><td>[link here](/api/latest/classes/Oskari.mapframework.bundle.mapmodule.plugin.DataSourcePlugin.html)</td>\r\n  </tr>\r\n</table>\r\n\r\n## Description\r\n\r\nRenders a pop-up that contains a list of data providers based on selected layers.\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/datasource.png)\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required.\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented.\r\n\r\n## Requests the bundle handles\r\n\r\nThis bundle doesn't handle any requests.\r\n\r\n## Requests the bundle sends out\r\n\r\nThis bundle doesn't send out any requests.\r\n\r\n## Events the bundle listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>openDialog</td><td>Opens up pop-up</td>\r\n  </tr>\r\n  <tr>\r\n    <td>getMetadataInfoCallback</td><td>shows metadata associated with the layer</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n## Events the bundle sends out\r\n\r\nThis bundle doesn't send out any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked on the page</td>\r\n    <td> Used to create the UI and to sort the layers</td>\r\n  </tr>\r\n  <tr>\r\n    <td>[OpenLayers](http://openlayers.org/)</td>\r\n    <td>not linked, assumes its linked by map</td>\r\n    <td>Uses OpenLayers' popup</td>\r\n  </tr>\r\n</table>\r\n\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\geolocation.md",
          "fileContent": "# Geo Location Plugin\r\n\r\n## Description\r\n\r\nThe plugin tries to locate the user with HTML5 GeoLocation or if that is not available, checks if the javascript methods provided by http://dev.maxmind.com/geoip/javascript are present and uses them if available. If location is successfully determined, centers the map on the location and zoom level 6. The HTML5 geolocation is parametrized to allow for max. one hour cached result and a timeout of 6 seconds.\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required.\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the plugin listens to\r\n\r\nThis plugin doesn't listen to any events.\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td>[OpenLayers](http://openlayers.org/)</td>\r\n    <td>not linked, assumes its linked by map</td>\r\n    <td>Uses mapmodule to transform geolocation coordinates from \"EPSG:4326\" to maps current projection</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\getinfoplugin.md",
          "fileContent": "# Get Info Plugin\r\n\r\n## Description\r\n\r\nThis plugin provides view of the from GetFeatureInfo and similar results what are processed in backend\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/gfi_query.png)\r\n\r\n## Bundle configuration\r\n\r\nHandling infoBox and ignoredLayerTypes in the plugin are made configurable. infoBox variable makes it possible to request infoBox with additional information later on. ignoredLayerTypes is an array of layer types that are ignored in the requests. This functionality is made because of new mapwfs2 which controls WFS's GFI data.\r\n\r\nThe colour scheme and font of the plugin are configurable, with variables `colourScheme` (Object) and `font` (String), respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. The structure of `colourScheme` should be of following format:\r\n\r\n```javascript\r\n{\r\n  \"val\": \"<id of the colour scheme, eg. 'blue'>\",\r\n  \"bgColour\": \"<the colour of the gfi popup header background, eg. '#0091FF'>\",\r\n  \"titleColour\": \"<the colour of the gfi popup header text, eg. '#FFFFFF'>\",\r\n  \"headerColour\": \"<the colour of myplaces popup title text, eg. '#0091FF'>\",\r\n  \"iconCls\": \"<either 'icon-close' or 'icon-close-white'>\"\r\n}\r\n```\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends out any requests\r\n\r\n## Events the bundle listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> EscPressedEvent </td><td> Closing GetInfo \"popup\" from screen.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> MapClickedEvent </td><td> Send ajax request to backend system.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapMoveEvent </td><td> Cancel ajax request.</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>GetInfoResultEvent</td><td> Result of ajax request formatted send as an event so that infobox handling can be done elsewhere </td>\r\n  </tr>\r\n</table>\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Dependency </th><th> Linked from </th><th> Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked (on page locally in portal) </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Oskari infobox](/documentation/bundles/framework/infobox) </td>\r\n    <td> Oskari's InfoBoxBundle </td>\r\n    <td> That handles the infobox as an Openlayers popup with customized UI\r\n  </td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Backend API](/documentation/backend/mapmodule/getinfoplugin) </td>\r\n    <td> N/A </td>\r\n    <td> Get info is handle in backend</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\indexmap.md",
          "fileContent": "# Index Map Plugin\r\n\r\n## Description\r\n\r\nThis plugin adds an indexmap for the map it is registered to.\r\n\r\n## Screenshot\r\n\r\n![closed](images/indexmap_closed.png)\r\n\r\nClosed\r\n\r\n![open](images/indexmap_open.png)\r\n\r\nOpen\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required, in which case the indexmap appears on the lower right corner of the map by default. If there are many elements in the same location, variable 'position' defines the order of the elements. \r\n\r\n\r\nIf you wish to change the location of the indexmap, you have two possibilities:\r\n\r\n1) Define location on a map by configuring variables 'classes' and 'position'. Below are the default values.\r\n\r\n```javascript\r\n{\r\n  \"location\" : {\r\n        \"classes\" : \"bottom right\",\r\n        \"position\" : 5\r\n  }\r\n};\r\n```\r\n\r\n2) Define container for the indexmap by configuring containerId.\r\n\r\n```javascript\r\n{\r\n  \"containerId\" = \"mycontainerId\"\r\n} \r\n```\r\n\r\n### Button icon\r\n\r\nBy default the button that open the indexmap has an icon with the map of the world. If you want to change this icon, you can override the background with the selector:\r\n\r\n```css\r\n.indexmapToggle div.icon {\r\n\tbackground-image: url('path/to/icon') !important;\r\n}\r\n```\r\n\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the plugin listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapMoveEvent </td><td> Updates ui to current map location</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> Why/When</th>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapMoveEvent </td><td> After map has moved within the indexmap</td>\r\n  </tr>\r\n</table>\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Dependency </th><th> Linked from </th><th> Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [OpenLayers](http://openlayers.org/) </td>\r\n    <td> not linked, assumes its linked by map </td>\r\n    <td> Uses OpenLayers.Control.OverviewMap to render the index map.</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\layerselectionplugin.md",
          "fileContent": "# Layer Selection Plugin\r\n\r\n## Description\r\n\r\nThis plugin provides a maplayer selection \"dropdown\" on top of the map.\r\n\r\n## Screenshot\r\n\r\n![open](images/layerselection_open.png)\r\n\r\n## Bundle configuration\r\n\r\n```javascript\r\n{\r\n  baseLayers : ['<layerid 1>','<layerid 2>','<layerid 3>'],\r\n  defaultBaseLayer : '<layerid 1>',\r\n  isStyleSelectable: <boolean>\r\n}\r\n```\r\n\r\nConfiguration is not required, but it can be used to set some selected layers as \"base layers\". Baselayers differ from normal layers that only one base layer is shown at a time. Setting `isStyleSelectable` to true will allow the user to change the style of map layers that have more than one style. This flag can be set in the publisher tool for layer selection.\r\n\r\nThe styling, font and colour scheme of the plugin are configurable, with variables `toolStyle` (String), `font` (String) and `colourScheme` (Object) respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. Following values are supported for the `toolStyle`: `rounded-light`, `rounded-dark`, `sharp-dark`, `sharp-light`, `3d-dark` and `3d-light`. An image `map-layer-button-<toolStyle>.png` is expected to be found in plugin's image resources directory. The `colourScheme` object should have keys `bgColour`, `titleColour` and `iconCls`.\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.MapLayerVisibilityRequest </td><td> Controls map layer selection by hiding map layers and making them visible on the map</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin listens to\r\n\r\nThis plugin doesn't listen any events.\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked (on page locally in portal) </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\layersplugin.md",
          "fileContent": "# Layers Plugin\r\n\r\n## Description\r\n\r\nThis is a plugin to bring more functionality for the mapmodules map implementation. It provides handling for rearranging layer order and controlling layer visibility. Provides information to other bundles if a layer becomes visible/invisible (out of scale/out of content geometry) and request handlers to move map to location/scale based on layer content. Also optimizes openlayers maplayers visibility setting if it detects that content is not in the viewport.\r\n\r\n## TODO\r\n\r\nHas some handling for the markers layer. IMHO shouldn't.\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required.\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented for this.\r\n\r\n## Requests the bundle handles\r\n\r\n<table class=\"table\">\r\n<tr>\r\n  <th> Request </th><th> How does the bundle react</th>\r\n</tr>\r\n<tr>\r\n  <td> MapModulePlugin.MapLayerVisibilityRequest </td><td> Hides a maplayer or changes a hidden layer to visible.</td>\r\n</tr>\r\n<tr>\r\n  <td> MapModulePlugin.MapMoveByLayerContentRequest </td><td> Moves the map to a location and/or scale where the maplayer has content. (Maplayer geometry is visible in viewport/scale is in range for layer).</td>\r\n</tr>\r\n</table>\r\n\r\n## Requests the bundle sends out\r\n\r\nThis bundle doesn't send any requests.\r\n\r\n## Events the bundle listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterRearrangeSelectedMapLayerEvent </td><td> Moves the Openlayers maplayers order to match the layer move spesified in the event, also handles markers layer that it would stay on top</td>\r\n  </tr>\r\n  <tr>\r\n    <td> MapMoveStartEvent </td><td> Stops internal timer scheduled to do a visibility check.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapMoveEvent </td><td> Schedules a visibility check to be done with a small delay (delay to improve performance on concurrent moves)</td>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapLayerAddEvent </td><td> Checks if added layer has geometries. If not, checks if it has geometryWKT (well-known text) value. If WKT is available, parses it to fill in the geometry array.</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the bundle sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> When it is triggered/what it tells other components</th>\r\n  </tr>\r\n  <tr>\r\n    <td> MapLayerVisibilityChangedEvent </td><td> Notifies other bundles if a layer has become visible/invisible telling if its out of scale or content area.</td>\r\n  </tr>\r\n</table>\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [OpenLayers](http://openlayers.org/) </td>\r\n    <td> not linked, assumes its linked by map </td>\r\n    <td> Uses Openlayers to parse WKT geometry, detect if it matches to current maps viewport and to get the centerpoint for layers geometry. Also controls Openlayers to show/hide layers.</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\logopluginservice.md",
          "fileContent": "# Logo Plugin Service\r\n\r\n## Description\r\nThis service can be used to extend the Logo-plugin. The same LogoPluginService instance is returned on repeated calls to Oskari.clazz.create (singleton pattern).\r\n\r\n```javascript\r\nvar logoService = Oskari.getSandbox().getService('Oskari.map.LogoPluginService');\r\nvar options = {\r\n  id:'links',\r\n  callback: function(event) {\r\n    //here you can construct you popup\r\n    alert(\"Hello world\");\r\n  }\r\n}\r\nlogoService.addLabel('Title', options);\r\n```\r\nThe callback is optional and will receive the click event from the link in the plugin.\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\markersplugin.md",
          "fileContent": "# Markers Plugin\r\n\r\n## Description\r\n\r\nThe plugin offers Marker functionality for the map. Adding, removing markers and event when a marker has been added or clicked.\r\nAlso adds a button to toolbar for adding markers.\r\n\r\n## TODO\r\n\r\n* marker placeholders are much bigger than actual markers. Clicks are registered on placeholder so the click area is too large.\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/mapmodule-markerplugin.png)\r\n\r\n## Plugin configuration\r\n\r\n\r\nNo configuration is required. Following is optional:\r\n```javascript\r\n{\r\n    markerButton : false\r\n}\r\n```\r\n\r\nA toolbar button is added to toolbar by default (if toolbar bundle is present). Config can be used to prevent this.\r\n\r\n## Plugin state\r\n\r\nMarkers on map are saved in state:\r\n\r\n```javascript\r\n{\r\n    \"markers\" : [\r\n        {\r\n            \"color\":\"ffde00\",\r\n            \"shape\":2,\r\n            \"msg\":\"user input\",\r\n            \"y\":7212755,\r\n            \"x\":427491,\r\n            \"size\":1\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\n## Requests the plugin handles\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>[MapModulePlugin.AddMarkerRequest](/documentation/requests/addmarkerrequest)</td><td>Adds or modifies marker on the map</td>\r\n  </tr>\r\n  <tr>\r\n    <td>[MapModulePlugin.RemoveMarkersRequest](/documentation/requests/removemarkersrequest)</td><td>Removes one or all markers from map</td>\r\n  </tr>\r\n</table>\r\n\r\n## Requests the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td> Toolbar.AddToolButtonRequest </td><td> Adds a toolbar button for activating marker tool. </td>\r\n  </tr>\r\n  <tr>\r\n    <td> MapModulePlugin.GetFeatureInfoActivationRequest </td><td> Disable GFI while adding a marker. </td>\r\n  </tr>\r\n  <tr>\r\n    <td> WfsLayerPlugin.ActivateHighlightRequest </td><td> Disable feature highlighting while adding a marker. </td>\r\n  </tr>\r\n  <tr>\r\n    <td> Toolbar.SelectToolButtonRequest </td><td> Reset toolbar to default tool after marker has been added. </td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> MapClickedEvent </td><td> When marker tool is activated, adds the marker to the spot indicated by the event.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> Toolbar.ToolbarLoadedEvent </td><td> Registers the toolbar button if toolbar wasn't available on startup.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> SearchClearedEvent </td><td> Removes all markers.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterRearrangeSelectedMapLayerEvent </td><td> Raises the markers layer to top so markers aren't lost behind another map layer.</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>AfterAddMarkerEvent</td><td> Notifies that a marker has been added and provides an ID for the marker. </td>\r\n  </tr>\r\n  <tr>\r\n    <td>AfterRemoveMarkersEvent</td><td> Notifies that a marker has been removed. If event has a marker ID a single marker was removed, \r\n    otherwise all markers were cleared </td>\r\n  </tr>\r\n  <tr>\r\n    <td>MarkerClickEvent</td><td> Notifies that a marker has been clicked. Provides the ID of the clicked marker. </td>\r\n  </tr>\r\n</table>\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Raphael](http://raphaeljs.com/) </td>\r\n    <td> Version 2.1.2 assumed to be linked </td>\r\n    <td> Used to create SVG icons </td>\r\n  </tr>\r\n  <tr>\r\n    <td> [OpenLayers](http://openlayers.org/) </td>\r\n    <td> not linked, assumes its linked by map </td>\r\n    <td> Uses OpenLayers.Layer.Vector for marker layer and OpenLayers.Feature.Vector for markers.</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\mylocationplugin.md",
          "fileContent": "# My Location Plugin\r\n\r\n## Description\r\n\r\nThe plugin offers the user a center map a his geolocation.\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/mylocationplugin.png)\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required. The following configuration options are optional:\r\n\r\n```javascript\r\n{\r\n  \"zoom\" : 11,\r\n  \"mode\": \"single\", \r\n  \"centerMapAutomatically\": true,\r\n  \"mobileOnly\": true\r\n}\r\n```\r\n\r\nConfigurable options:\r\n* zoom: configure zoom level that is used when zoomed to user location (otherwise zoomed based on accuracy)\r\n* mode: \"single\" or \"continuous\". \r\n    * Single mode: moves map to user location when used. \r\n    * Continuous mode: Show user location on the map with accuracy circle and follow the user continuously. If user location is outside the map viewport then map is centered on user location.\r\n* centerMapAutomatically: `true` or `false`. When `true` map is centered to user location automatically on startup.\r\n* mobileOnly: `true` or `false`. Restrict functionality to mobile devices. When `true` the `centerMapAutomatically` and `mode` are ignored and the UI is not shown on desktop devices.\r\n\r\nDefault configuration:\r\n{\r\n  \"mode: \"single\",\r\n  \"centerMapAutomatically\": false\r\n}\r\n\r\n## Requests the plugin handles\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [MyLocationPlugin.GetUserLocationRequest](/documentation/requests/getuserlocationrequest) </td><td> Gets user geolocation</td>\r\n  </tr>\r\n</table>\r\n\r\n## Requests the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Where/why it's used</th>\r\n  </tr>\r\n  <tr>\r\n    <td>StartUserLocationTrackingRequest</td><td>Start user tracking</td>\r\n  </tr>\r\n  <tr>\r\n    <td>StopUserLocationTrackingRequest</td><td>Stop user tracking</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin listens to\r\n\r\nThis bundle doesn't listen to any events.\r\n\r\n## Events the plugin sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>[UserLocationEvent](/documentation/events/userlocationevent)</td>\r\n    <td>Sends the event when getted user geolocation.</td>\r\n  </tr>\r\n</table>\r\n\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\panbuttons.md",
          "fileContent": "# Pan Buttons Plugin\r\n\r\n## Description\r\n\r\nThe plugin offers the user a move my by pan buttons\r\n\r\n## TODO\r\n\r\n* image url config (can be used by mapmodule image path [getImageUrl()])\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/panbuttons.png)\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required. Following is optional:\r\n\r\nThe styling and font of the plugin are configurable, with variables `toolStyle` (String) and `font` (String), respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. Following values are supported for the `toolStyle`: `rounded-light`, `rounded-dark`, `sharp-dark`, `sharp-light`, `3d-dark` and `3d-light`. An image `panbutton-sprites-<toolStyle>.png` is expected to be found in plugin's image resources directory.\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the plugin listens to\r\n\r\nThis bundle doesn't listen to any events.\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked </td>\r\n    <td> Used to create the UI</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\portti2zoombar.md",
          "fileContent": "# Portti2 Zoombar Plugin\r\n\r\n## Description\r\n\r\nThe plugin offers the user a zoom control for the map. Gets the initial zoom level from the map it is registered to when started.\r\n\r\n## TODO\r\n\r\n* Tooltips\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/zoombar.png)\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required, but optionally location can be overridden by giving:\r\n\r\n```javascript\r\n{\r\n  location : {\r\n    top : '10px',\r\n    left : '10px'\r\n  }\r\n}\r\n```\r\n\r\nBottom and right can also be used.\r\n\r\nThe styling and font of the plugin are configurable, with variables `toolStyle` (Object) and `font` (String), respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. Following styles are supported for the `toolStyle.val`: `rounded-light`, `rounded-dark`, `sharp-dark`, `sharp-light`, `3d-dark` and `3d-light`. Images `zoombar-<toolStyle>.png`, `zoombar-cursor-<toolStyle>.png`, `zoombar_minus-<toolStyle>.png` and `zoombar_minus-<toolStyle>.png` are expected to be found in plugin's image resources directory. Also, widths and heights should be configured following the example:\r\n\r\n```javascript\r\n{\r\n  val: 'rounded-dark',  // The id of the style.\r\n  widthPlus: '22px',    // Width of the 'plus' image.\r\n  widthMinus: '22px',   // Width of the 'minus' image.\r\n  widthCenter: '22px',  // Width of the 'center' image.\r\n  heightPlus: '38px',   // Height of the 'plus' image.\r\n  heightMinus: '39px',  // Height of the 'minus' image.\r\n  heightCenter: 12,     // Height of the 'center' image. NOTE! an integer.\r\n  heightCursor: '18px', // Height of the 'cursor' image.\r\n  widthCursor: '17px'   // Width of the 'cursor' image.\r\n}\r\n```\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the plugin listens to\r\n\r\n|| Event || How does the bundle react ||\r\n|| AfterMapMoveEvent || Zoom to in or out \\\\ ||\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked </td>\r\n    <td> Used to create the UI</td></tr>\r\n  <tr>\r\n    <td> [RightJS slider](http://rightjs.org/ui/slider) </td>\r\n    <td> https://github.com/nls-oskari/oskari/blob/master/libraries/rightjs/javascripts/right/slider.js </td>\r\n    <td> RightJS UI component for slider - used to show zoombar </td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\publishertoolbar.md",
          "fileContent": "# PublishedToolbar Plugin\r\n\r\n## Description\r\n\r\nThis is a plugin to bring toolbar functionality to published maps. It provides a container for the toolbar bundle to add itself into and available buttons allowing publishable maps to be configured to include only the wanted tools. The toolbar bundle handles most requests, except \"Toolbar.ToolContainerRequest\", which are handled by publishertoolbar.\r\n\r\n## Bundle configuration\r\n\r\n```javascript\r\n{\r\n    \"toolbarId\" : \"PublisherToolbar\"\r\n}\r\n```\r\n\r\nNo configuration is required. If the toolbarId is defined, then publishertoolbar creates a new toolbar using the given id into itself. This is particularily useful when configuring a published map.\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented for this.\r\n\r\n## Requests the bundle handles\r\n\r\n<table class=\"table\">\r\n<tr>\r\n  <th> Request </th><th> How does the bundle react</th>\r\n</tr>\r\n<tr>\r\n  <td> MapModulePlugin.MapLayerVisibilityRequest </td><td> Hides a maplayer or changes a hidden layer to visible.</td>\r\n</tr>\r\n<tr>\r\n  <td> MapModulePlugin.MapMoveByLayerContentRequest </td><td> Moves the map to a location and/or scale where the maplayer has content. (Maplayer geometry is visible in viewport/scale is in range for layer).</td>\r\n</tr>\r\n</table>\r\n\r\n## Requests the bundle handles\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> Toolbar.ToolContainerRequest </td><td> Creates and removes popup content containers within the plugin container provided by publishertoolbar</td>\r\n  </tr>\r\n</table>\r\n\r\n## Requests the bundle sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td> Toolbar.ToolbarRequest </td><td> Adds a toolbar into the published map. </td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the bundle listens to\r\n\r\nThis bundle doesn't listen to any events.\r\n\r\n## Events the bundle sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [OpenLayers](http://openlayers.org/) </td>\r\n    <td> not linked, assumes its linked by map </td>\r\n    <td> Uses Openlayers to parse WKT geometry, detect if it matches to current maps viewport and to get the centerpoint for layers geometry. Also controls Openlayers to show/hide layers.</td>\r\n  </tr>\r\n  <tr>\r\n    <td> [Oskari toolbar](/documentation/bundles/framework/toolbar) </td>\r\n    <td> Oskari's ToolbarBundle </td>\r\n    <td> That handles the toolbar functionality</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\scalebar.md",
          "fileContent": "# Scale Bar Plugin\r\n\r\n## Description\r\n\r\nThe plugin adds a scale bar to the map it is registered to.\r\n\r\n## Screenshot\r\n\r\n![screenshot](images/scalebar.png)\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required.\r\n\r\n## Requests the plugin handles\r\n\r\nThis plugin doesn't handle any requests.\r\n\r\n## Requests the plugin sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the plugin listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Event</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>AfterMapMoveEvent</td><td>Updates ui to current zoom level</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the plugin sends out\r\n\r\nThis bundle doesn't send any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td>[OpenLayers](http://openlayers.org/)</td>\r\n    <td>not linked, assumes its linked by map</td>\r\n    <td>Uses OpenLayers.Control.ScaleLine to render the scalebar.</td>\r\n  </tr>\r\n</table>\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\search.md",
          "fileContent": "# Search Plugin\r\n\r\n## Description\r\n\r\nCreates a search field for places in published maps.\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required. Following is optional:\r\n\r\nThe styling and font of the plugin are configurable, with variables `toolStyle` (Object) and `font` (String), respectively. A CSS class of `oskari-publisher-font-<font>` is expected to be defined with font-family definition. Following styles are supported for the `toolStyle.val`: `rounded-light`, `rounded-dark`, `sharp-dark`, `sharp-light`, `3d-dark` and `3d-light`. Images for search field background are expected to be found in plugin's image resources directory for left, middle and right sides of the field: `search-tool-<toolStyle>_01.png`, `search-tool-<toolStyle>_02.png` and `search-tool-<toolStyle>_03.png`, respectively. Also, the widths of the images are expected to be defined in config object:\r\n\r\n```javascript\r\n{\r\n  val: 'rounded-dark', // The id of the style.\r\n  widthLeft: '17px',   // Width of the left side image.\r\n  widthRight: '32px'   // Width of the right side image.\r\n}\r\n```\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented.\r\n\r\n## Requests the bundle handles\r\n\r\nThis bundle doesn't handle any requests.\r\n\r\n## Requests the bundle sends out\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>Why/when</th>\r\n  </tr>\r\n  <tr>\r\n    <td>DisableMapKeyboardMovementRequest</td>\r\n    <td>Disables the map movement when entering text to the search field.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>EnableMapKeyboardMovementRequest</td>\r\n    <td>Enables the map movement when the search field blurs again.</td>\r\n  </tr>\r\n  <tr>\r\n    <td>MapMoveRequest</td>\r\n    <td>Moves the map to a location in the results table received from the search service.</td>\r\n  </tr>\r\n</table>\r\n\r\n## Events the bundle listens to\r\n\r\nThis bundle doesn't listen to any events.\r\n\r\n## Events the bundle sends out\r\n\r\nThis bundle doesn't send out any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked (on page locally in portal) </td>\r\n    <td> Used to create the UI and to sort the layers</td>\r\n  </tr>\r\n  <tr>\r\n    <td>[OpenLayers](http://openlayers.org/)</td>\r\n    <td>not linked, assumes its linked by map</td>\r\n    <td>Uses OpenLayers' popup</td>\r\n  </tr>\r\n  <tr>\r\n    <td>Oskari.mapframework.bundle.search.service.SearchService</td>\r\n    <td>Expects to be present in application setup</td>\r\n    <td>Sends the search request trough the service</td>\r\n  </tr>\r\n</table>\r\n\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\vectorlayerplugin.md",
          "fileContent": "# Vector Layer Plugin\r\n\r\n## Description\r\n\r\n Provides functionality to draw vector layers on the map.\r\n\r\n## Bundle configuration\r\n\r\nNo configuration is required. Following is optional:\r\n```javascript\r\n{\r\n    \"layers\": [    \r\n        {\r\n            \"id\": \"EXAMPLE1\",\r\n            \"style\": {\r\n                \"fill\": {\r\n                    \"color\": \"#ff00ff\"\r\n                },\r\n                \"stroke\": {\r\n                    \"color\": \"#ff00ff\",\r\n                    \"width\": 3\r\n                },\r\n                \"text\": {\r\n                    \"fill\": {\r\n                        \"color\": \"#0000ff\"\r\n                    },\r\n                    \"stroke\": {\r\n                        \"color\": \"#ff00ff\",\r\n                        \"width\": 4\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    ]\r\n}\r\n```\r\n\r\nThis configuration creates one (or many) layer(s) when plugin is started. You can tell layer default style for style object. When feature added layer style is used if feature request not contains feature style. If layer and feature style is not defined using defaults.\r\n\r\n## Bundle state\r\n\r\nNo statehandling has been implemented.\r\n\r\n## Requests the bundle handles\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Request</th><th>How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.AddFeaturesToMapRequest</td><td>Add features on the map</td>\r\n  </tr>\r\n  <tr>\r\n    <td>MapModulePlugin.RemoveFeaturesFromMapRequest</td><td>Removes features from map</td>\r\n  </tr>\r\n</table>\r\n\r\n## Requests the bundle sends out\r\n\r\nThis plugin doesn't sends any requests.\r\n\r\n## Events the bundle listens to\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th> Event </th><th> How does the bundle react</th>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterMapLayerRemoveEvent </td><td> Remove OpenLayer's layer from map. </td>\r\n  </tr>\r\n  <tr>\r\n    <td> AfterChangeMapLayerOpacityEvent </td><td> Update OpenLayer's layer opacity. </td>\r\n  </tr>\r\n  \r\n</table>\r\n\r\n## Events the bundle sends out\r\n\r\nThis bundle doesn't send out any events.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [jQuery](http://api.jquery.com/) </td>\r\n    <td> Version 1.7.1 assumed to be linked (on page locally in portal) </td>\r\n    <td> Used to create the UI and to sort the layers</td>\r\n  </tr>\r\n  <tr>\r\n    <td>[OpenLayers](http://openlayers.org/)</td>\r\n    <td>not linked, assumes its linked by map</td>\r\n    <td>Used to create the vector layer.</td>\r\n  </tr>\r\n</table>\r\n\r\n"
        },
        {
          "docPath": "mapping\\mapmodule\\vectortilelayerplugin.md",
          "fileContent": "# Vector Tile Layer Plugin  \r\n\r\n## Description\r\n\r\nThe plugin offers functionality to add Vector tile layers ([MVT](https://www.mapbox.com/vector-tiles/specification/)) to the map. Added layers support styling with Oskari style definitions, see featureStyle/optionalStyles in AddFeaturesToMapRequest. Maps with projection EPSG:3857 (Web Mercator) work out of the box, other projections need tile grid configuration in the layer options.\r\n\r\n\r\n## Layer data model\r\n\r\nThe layer domain object is subclassed from AbstractLayer as usual.\r\n\r\nThe layer url must be in XYZ-format, eg. `https://mytiles.com/vectortile/{epsg}/{z}/{x}/{y}.pbf`. Placeholder `epsg` is optional and if present, will be replaced with current projection of the map, eg. `EPSG:3067`. Placeholders `x`, `y` and `z` will be replaced with tile coordinates calculated from the map view and tile grid.\r\n\r\nThe layer model field `options` is of type object having multiple optional keys `tileGrid`, `styles`, `hover` and `attributions`.\r\n\r\n### Tile Grid\r\n\r\nMap projections apart from EPSG:3857 (Web Mercator) need tile grid configuration in the layer options. The configuration format is in the format of Open Layers [TileGrid class options](http://openlayers.org/en/v5.2.0/apidoc/module-ol_tilegrid_TileGrid-TileGrid.html#TileGrid). For example:\r\n\r\n```javascript\r\n\"tileGrid\": {\r\n    \"origin\": [-548576, 8388608],\r\n    \"resolutions\": [8192, 4096, 2048, 1024, 512, 256, 128, 64, 32, 16, 8, 4, 2, 1, 0.5, 0.25],\r\n    \"tileSize\": [256, 256]\r\n}\r\n```\r\n\r\n### Styles\r\n\r\nThe appearance of the vector layer is defined with Oskari JSON style definition for each MVT internal \"layer\". If the `styles` key exists in the layer options, the value should be a object with at least key `default`, having the defalult style definition. Additionally other styles can be defined with additional keys, eg.\r\n\r\n```javascript\r\n\"styles\": {\r\n    \"default\": {...},\r\n    \"myOwnStyle\": {...},\r\n    ...\r\n}\r\n```\r\n\r\nEach style definition has keys for the MVT layer names that should be rendered:\r\n\r\n```javascript\r\n\"styles\": {\r\n    \"default\": {\r\n        \"building\": {...}\r\n        \"water\": {...},\r\n        \"transportation\": {...},\r\n        \"landcover\": {...}\r\n    },\r\n    ...\r\n}\r\n```\r\n\r\nAnd each key has object value with one or both keys `featureStyle`, `optionalStyles`.\r\n\r\nSee [Oskari JSON style](/documentation/examples/oskari-style) for featureStyle/optionalStyle object definition.\r\n\r\nStyle example:\r\n\r\n```javascript\r\n\"styles\": {\r\n    \"default\": {\r\n        \"building\": {\r\n            \"featureStyle\": {\r\n                \"fill\": {\r\n                    \"color\": \"#ff00ff\"\r\n                }\r\n            },\r\n            \"optionalStyles\": [\r\n                {\r\n                    \"property\": {\r\n                        \"key\": \"id\",\r\n                        \"value\": 417771333\r\n                    },\r\n                    \"stroke\": {\r\n                        \"color\": \"#000000\",\r\n                        \"width\": 2\r\n                    }\r\n                }\r\n            ]\r\n        }\r\n    },\r\n    \"black_buildings\": {\r\n        \"building\": {\r\n            \"featureStyle\": {\r\n                \"fill\": {\r\n                    \"color\": \"#000000\"\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n### Hover\r\n\r\nHover describes how to visualize features on mouse hover and what kind of tooltip should be shown.\r\nHover has two optional keys `featureStyle` and `content`.\r\n\r\nContent should be content of tooltip as an array. Each object creates a row to the tooltip.\r\nEach row object has `key` or `keyProperty` and `valueProperty`.\r\n`key` is a label and will be rendered as is.\r\n`valueProperty` and `keyProperty` will be fetched from the feature's properties.\r\n\r\n```javascript\r\n\"hover\": {\r\n    \"featureStyle\":  {...},\r\n    \"content\": [\r\n        { \"key\": \"Feature Data\" },\r\n        { \"key\": 'Feature ID', \"valueProperty\": \"id\" },\r\n        { \"keyProperty\": \"type\", \"valueProperty\": \"name\" }\r\n    ]\r\n}\r\n```\r\nExampe above would create a tooltip like\r\n\r\nFeature Data\r\nFeature ID: 23098523243\r\nRoad: Main Street\r\n\r\n### Attributions\r\n\r\nDefines layer attributions to be shown at the bottom of the map.\r\nIf the `link` property is defined, renders an attribution as a link to the given address.\r\n\r\n```javascript\r\n\"attributions\": [\r\n    {\"label\": \"© MapTiler\", \"link\":\"https://www.maptiler.com/license/maps/\"},\r\n    {\"label\": \"© OpenStreetMap contributors\", \"link\":\"https://www.openstreetmap.org/copyright\"}\r\n]\r\n```\r\n\r\n## TODO\r\n\r\n* Layer collections. Only individual layers are currently supported.\r\n\r\n## Plugin configuration\r\n\r\nNo configuration is required. \r\n\r\n## Plugin state\r\n\r\nNo statehandling has been implemented.\r\n\r\n## Dependencies\r\n\r\n<table class=\"table\">\r\n  <tr>\r\n    <th>Dependency</th><th>Linked from</th><th>Purpose</th>\r\n  </tr>\r\n  <tr>\r\n    <td> [OpenLayers](http://openlayers.org/) </td>\r\n    <td> imported from NPM</td>\r\n    <td> Uses OpenLayers Vector tile source & layer support</td>\r\n  </tr>\r\n</table>\r\n"
        }
      ],
      "desc": "Provides abstraction for map implementation (Openlayers 2/3) and provides a plugin mechanism to add additional functionality to map.",
      "path": "mapping\\mapmodule\\bundle.md",
      "event": [
        {
          "name": "AfterAddMarkerEvent ",
          "path": "mapping/mapmodule/event/AfterAddMarkerEvent.md",
          "file": "AfterAddMarkerEvent.md",
          "rpc": true,
          "desc": "Notifies that marker has been added to the map."
        },
        {
          "name": "AfterMapMoveEvent ",
          "path": "mapping/mapmodule/event/AfterMapMoveEvent.md",
          "file": "AfterMapMoveEvent.md",
          "rpc": true,
          "desc": "Notifies that map has been moved or zoomed."
        },
        {
          "name": "AfterRemoveMarkersEvent",
          "path": "mapping/mapmodule/event/AfterRemoveMarkersEvent.md",
          "file": "AfterRemoveMarkersEvent.md",
          "rpc": false,
          "desc": "Event is sent after map markers are removed"
        },
        {
          "name": "DataForMapLocationEvent ",
          "path": "mapping/mapmodule/event/DataForMapLocationEvent.md",
          "file": "DataForMapLocationEvent.md",
          "rpc": true,
          "desc": "Notifies application that a click on the map resulted in more data for that location (GFI style content)."
        },
        {
          "name": "EscPressedEvent",
          "path": "mapping/mapmodule/event/EscPressedEvent.md",
          "file": "EscPressedEvent.md",
          "rpc": false,
          "desc": "Event is sent when ESC key in keyboard is pressed so bundles can react to it."
        },
        {
          "name": "FeatureEvent ",
          "path": "mapping/mapmodule/event/featureevent.md",
          "file": "featureevent.md",
          "rpc": true,
          "desc": "Used to notify about add, remove, update and click events for features."
        },
        {
          "name": "GetInfoResultEvent",
          "path": "mapping/mapmodule/event/GetInfoResultEvent.md",
          "file": "GetInfoResultEvent.md",
          "rpc": false,
          "desc": "Update map click information coming from ajax request"
        },
        {
          "name": "LayerToolsEditModeEvent",
          "path": "mapping/mapmodule/event/LayerToolsEditModeEvent.md",
          "file": "LayerToolsEditModeEvent.md",
          "rpc": false,
          "desc": "Event sent when user edits layout order"
        },
        {
          "name": "map.layer.activation",
          "path": "mapping/mapmodule/event/map.layer.activation.md",
          "file": "map.layer.activation.md",
          "rpc": false,
          "desc": "Triggered when a layer has activated/deactivated."
        },
        {
          "name": "MapClickedEvent ",
          "path": "mapping/mapmodule/event/MapClickedEvent.md",
          "file": "MapClickedEvent.md",
          "rpc": true,
          "desc": "Notifies user that map has been clicked."
        },
        {
          "name": "MapLayerVisibilityChangedEvent",
          "path": "mapping/mapmodule/event/MapLayerVisibilityChangedEvent.md",
          "file": "MapLayerVisibilityChangedEvent.md",
          "rpc": false,
          "desc": "This is used to notify that layers visibility has changed. Either the map has\nmoved out of the layers scale range or the layers geometry is no longer in the maps viewport.\nListeners should also check getMapLayer().getVisible() method that indicates if the map has been hidden by the user."
        },
        {
          "name": "MapSizeChangedEvent",
          "path": "mapping/mapmodule/event/MapSizeChangedEvent.md",
          "file": "MapSizeChangedEvent.md",
          "rpc": false,
          "desc": "Event is sent when the map div size is changed"
        },
        {
          "name": "MapTourEvent ",
          "path": "mapping/mapmodule/event/MapTourEvent.md",
          "file": "MapTourEvent.md",
          "rpc": true,
          "desc": "Notifies status of MapTourRequest"
        },
        {
          "name": "MarkerClickEvent ",
          "path": "mapping/mapmodule/event/MarkerClickEvent.md",
          "file": "MarkerClickEvent.md",
          "rpc": true,
          "desc": "Notifies that map marker has been clicked."
        },
        {
          "name": "MouseHoverEvent",
          "path": "mapping/mapmodule/event/MouseHoverEvent.md",
          "file": "MouseHoverEvent.md",
          "rpc": false,
          "desc": "Notifies user about the pointer moves."
        },
        {
          "name": "ProgressEvent",
          "path": "mapping/mapmodule/event/ProgressEvent.md",
          "file": "ProgressEvent.md",
          "rpc": false,
          "desc": "An event that tells if something is progressing or is it done (layers loading / layers done loading)"
        },
        {
          "name": "TimeChangedEvent ",
          "path": "mapping/mapmodule/event/TimeChangedEvent.md",
          "file": "TimeChangedEvent.md",
          "rpc": true,
          "desc": "Notifies of changed time"
        },
        {
          "name": "UserLocationEvent ",
          "path": "mapping/mapmodule/event/userlocationevent.md",
          "file": "userlocationevent.md",
          "rpc": true,
          "desc": "Notifies user location."
        }
      ],
      "request": [
        {
          "name": "AddFeaturesToMapRequest ",
          "path": "mapping/mapmodule/request/addfeaturestomaprequest.md",
          "file": "addfeaturestomaprequest.md",
          "rpc": true,
          "desc": "Allows user to add features to map."
        },
        {
          "name": "AddMapLayerRequest",
          "path": "mapping/mapmodule/request/addmaplayerrequest.md",
          "file": "addmaplayerrequest.md",
          "rpc": false,
          "desc": "Adds a layer to the map."
        },
        {
          "name": "AddMarkerRequest ",
          "path": "mapping/mapmodule/request/addmarkerrequest.md",
          "file": "addmarkerrequest.md",
          "rpc": true,
          "desc": "Add marker to certain point on map."
        },
        {
          "name": "ChangeMapLayerOpacityRequest ",
          "path": "mapping/mapmodule/request/changemaplayeropacityrequest.md",
          "file": "changemaplayeropacityrequest.md",
          "rpc": true,
          "desc": "Allows user to change map layer opacity on a map."
        },
        {
          "name": "ChangeMapLayerStyleRequest ",
          "path": "mapping/mapmodule/request/changemaplayerstylerequest.md",
          "file": "changemaplayerstylerequest.md",
          "rpc": true,
          "desc": "Allow user to change map layer style between preconfigured options on the map (styles available for a WMS-layer etc)."
        },
        {
          "name": "DisableMapKeyboardMovementRequest",
          "path": "mapping/mapmodule/request/disablemapkeyboardmovementrequest.md",
          "file": "disablemapkeyboardmovementrequest.md",
          "rpc": false,
          "desc": "Disable map keyboard movement."
        },
        {
          "name": "DisableMapMouseMovementRequest",
          "path": "mapping/mapmodule/request/disablemapmousemovementrequest.md",
          "file": "disablemapmousemovementrequest.md",
          "rpc": false,
          "desc": "Disable map mouse movement."
        },
        {
          "name": "EnableMapKeyboardMovementRequest",
          "path": "mapping/mapmodule/request/enablemapkeyboardmovementrequest.md",
          "file": "enablemapkeyboardmovementrequest.md",
          "rpc": false,
          "desc": "Enable map keyboard movement."
        },
        {
          "name": "EnableMapMouseMovementRequest",
          "path": "mapping/mapmodule/request/enablemapmousemovementrequest.md",
          "file": "enablemapmousemovementrequest.md",
          "rpc": false,
          "desc": "Enable map mouse movement."
        },
        {
          "name": "GetFeatureInfoRequest ",
          "path": "mapping/mapmodule/request/GetFeatureInfoRequest.md",
          "file": "GetFeatureInfoRequest.md",
          "rpc": true,
          "desc": "Display feature info box."
        },
        {
          "name": "GetUserLocationRequest ",
          "path": "mapping/mapmodule/request/getuserlocationrequest.md",
          "file": "getuserlocationrequest.md",
          "rpc": true,
          "desc": "Get user's location"
        },
        {
          "name": "map.layer.activation",
          "path": "mapping/mapmodule/request/map.layer.activation.md",
          "file": "map.layer.activation.md",
          "rpc": false,
          "desc": "Flags the layer as activated/deactivated."
        },
        {
          "name": "MapModulePlugin.MapLayerUpdateRequest",
          "path": "mapping/mapmodule/request/MapModulePlugin.MapLayerUpdateRequest.md",
          "file": "MapModulePlugin.MapLayerUpdateRequest.md",
          "rpc": false,
          "desc": "Update the map layer data on map."
        },
        {
          "name": "MapModulePlugin.MapLayerVisibilityRequest ",
          "path": "mapping/mapmodule/request/MapModulePlugin.MapLayerVisibilityRequest.md",
          "file": "MapModulePlugin.MapLayerVisibilityRequest.md",
          "rpc": true,
          "desc": "Allows user to change map layer visibility."
        },
        {
          "name": "MapModulePlugin.MapMoveByLayerContentRequest",
          "path": "mapping/mapmodule/request/MapModulePlugin.MapMoveByLayerContentRequest.md",
          "file": "MapModulePlugin.MapMoveByLayerContentRequest.md",
          "rpc": false,
          "desc": "Allows the user to move the map by the layer content."
        },
        {
          "name": "MapModulePlugin.RegisterStyleRequest",
          "path": "mapping/mapmodule/request/MapModulePlugin.RegisterStyleRequest.md",
          "file": "MapModulePlugin.RegisterStyleRequest.md",
          "rpc": false,
          "desc": "Allows user to add wellknown svg styles."
        },
        {
          "name": "MapMoveRequest ",
          "path": "mapping/mapmodule/request/MapMoveRequest.md",
          "file": "MapMoveRequest.md",
          "rpc": true,
          "desc": "Allows user to move the map to certain location."
        },
        {
          "name": "MapTourRequest ",
          "path": "mapping/mapmodule/request/MapTourRequest.md",
          "file": "MapTourRequest.md",
          "rpc": true,
          "desc": "Allows programmatic tour around the map showcasing multiple locations"
        },
        {
          "name": "MapModulePlugin.MarkerVisibilityRequest ",
          "path": "mapping/mapmodule/request/markervisibilityrequest.md",
          "file": "markervisibilityrequest.md",
          "rpc": true,
          "desc": "Show or hide marker from map."
        },
        {
          "name": "RearrangeSelectedMapLayerRequest ",
          "path": "mapping/mapmodule/request/rearrangeselectedmaplayerrequest.md",
          "file": "rearrangeselectedmaplayerrequest.md",
          "rpc": true,
          "desc": "Allow user to change order of map layers in relation to other layers on the map."
        },
        {
          "name": "RemoveFeaturesFromMapRequest ",
          "path": "mapping/mapmodule/request/removefeaturesfrommaprequest.md",
          "file": "removefeaturesfrommaprequest.md",
          "rpc": true,
          "desc": "Remove vector features from map"
        },
        {
          "name": "RemoveMapLayerRequest",
          "path": "mapping/mapmodule/request/RemoveMapLayerRequest.md",
          "file": "RemoveMapLayerRequest.md",
          "rpc": false,
          "desc": "Removes a map layer from map."
        },
        {
          "name": "RemoveMarkersRequest ",
          "path": "mapping/mapmodule/request/removemarkersrequest.md",
          "file": "removemarkersrequest.md",
          "rpc": true,
          "desc": "Remove markers from the map."
        },
        {
          "name": "SetTimeRequest ",
          "path": "mapping/mapmodule/request/SetTimeRequest.md",
          "file": "SetTimeRequest.md",
          "rpc": true,
          "desc": "Allows programmatic change of time for 3d map"
        },
        {
          "name": "ShowProgressSpinnerRequest ",
          "path": "mapping/mapmodule/request/ShowProgressSpinnerRequest.md",
          "file": "ShowProgressSpinnerRequest.md",
          "rpc": true,
          "desc": "Allows progress spinner to be shown or hidden on a map."
        },
        {
          "name": "StartUserLocationTrackingRequest ",
          "path": "mapping/mapmodule/request/StartUserLocationTrackingRequest.md",
          "file": "StartUserLocationTrackingRequest.md",
          "rpc": true,
          "desc": "Start tracking user's location."
        },
        {
          "name": "StopUserLocationTrackingRequest ",
          "path": "mapping/mapmodule/request/StopUserLocationTrackingRequest.md",
          "file": "StopUserLocationTrackingRequest.md",
          "rpc": true,
          "desc": "Stop tracking user's location."
        },
        {
          "name": "VectorLayerRequest ",
          "path": "mapping/mapmodule/request/vectorlayerrequest.md",
          "file": "vectorlayerrequest.md",
          "rpc": true,
          "desc": "Adds a new feature layer to map or updates an existing layer."
        },
        {
          "name": "ZoomToFeaturesRequest ",
          "path": "mapping/mapmodule/request/zoomtofeaturesrequest.md",
          "file": "zoomtofeaturesrequest.md",
          "rpc": true,
          "desc": "Moves map to show referenced vector features on the viewport."
        }
      ]
    },
    "maplegend": {
      "ns": "mapping",
      "name": "maplegend",
      "desc": "Displays legend images of selected map layers in a Flyout if the layers have legend image urls set.",
      "path": "mapping\\maplegend\\bundle.md"
    },
    "mapmodule3d": {
      "ns": "mapping",
      "name": "mapmodule3d",
      "desc": "Ol Cesium implementation of the mapmodule bundle.",
      "path": "mapping\\mapmodule3d\\bundle.md"
    },
    "maprotator": {
      "ns": "mapping",
      "name": "maprotator",
      "desc": "Provides functionality to rotate the map when the bundle is started. To rotate the map press SHIFT + ALT + Drag with mouse.",
      "path": "mapping\\maprotator\\bundle.md",
      "event": [
        {
          "name": "map.rotated",
          "path": "mapping/maprotator/event/map.rotated.md",
          "file": "map.rotated.md",
          "rpc": false,
          "desc": "Event which informs how many degrees the map has rotated."
        }
      ],
      "request": [
        {
          "name": "rotate.map request",
          "path": "mapping/maprotator/request/rotate.map.md",
          "file": "rotate.map.md",
          "rpc": false,
          "desc": "Sets the map at a certain angle based on degrees."
        }
      ]
    },
    "mapwmts": {
      "ns": "mapping",
      "name": "mapwmts",
      "desc": "Support for WMTS-layers.",
      "path": "mapping\\mapwmts\\bundle.md"
    },
    "metadata": {
      "ns": "mapping",
      "name": "metadata",
      "desc": "Deprecated. Provides UI to make selection on map.",
      "path": "mapping\\metadata\\bundle.md"
    },
    "metadatacatalogue": {
      "ns": "mapping",
      "name": "metadatacatalogue",
      "desc": "Bundle provides metadata catalogue search functionality for the map.",
      "path": "mapping\\metadatacatalogue\\bundle.md",
      "event": [
        {
          "name": "MetaData.FinishedDrawingEvent",
          "path": "mapping/metadatacatalogue/event/MetaData.FinishedDrawingEvent.md",
          "file": "MetaData.FinishedDrawingEvent.md",
          "rpc": false,
          "desc": "Used to notify components that the drawing has been finished."
        },
        {
          "name": "MetadataSearchResultEvent ",
          "path": "mapping/metadatacatalogue/event/MetadataSearchResultEvent.md",
          "file": "MetadataSearchResultEvent.md",
          "rpc": true,
          "desc": "Notifies that a metadata search has been performed and the result is accessible through the event."
        }
      ],
      "request": [
        {
          "name": "AddSearchResultActionRequest",
          "path": "mapping/metadatacatalogue/request/addsearchresultactionrequest.md",
          "file": "addsearchresultactionrequest.md",
          "rpc": false,
          "desc": "Shows action element in metadata search results list"
        },
        {
          "name": "MetadataSearchRequest ",
          "path": "mapping/metadatacatalogue/request/MetaDataSearchRequest.md",
          "file": "MetaDataSearchRequest.md",
          "rpc": true,
          "desc": "Make a metadata search query."
        }
      ]
    },
    "metadataflyout": {
      "ns": "mapping",
      "name": "metadataflyout",
      "desc": "Generic functionality to display metadata from a CSW-service",
      "path": "mapping\\metadataflyout\\bundle.md",
      "request": [
        {
          "name": "catalogue.AddTabRequest",
          "path": "mapping/metadataflyout/request/catalogue.AddTabRequest.md",
          "file": "catalogue.AddTabRequest.md",
          "rpc": false,
          "desc": "Requests tab to be added"
        },
        {
          "name": "catalogue.ShowMetadataRequest",
          "path": "mapping/metadataflyout/request/catalogue.showmetadatarequest.md",
          "file": "catalogue.showmetadatarequest.md",
          "rpc": false,
          "desc": "Request for showing metadata for the given uuid, layer id or RS_Identifier Code / RS_Identifier CodeSpace"
        }
      ]
    },
    "myplaces": {
      "ns": "mapping",
      "name": "myplaces",
      "desc": "My places functionality.",
      "path": "mapping\\myplaces\\bundle.md",
      "event": [
        {
          "name": "MyPlaces.MyPlacesChangedEvent",
          "path": "mapping/myplaces/event/MyPlaces.MyPlacesChangedEvent.md",
          "file": "MyPlaces.MyPlacesChangedEvent.md",
          "rpc": false,
          "desc": "Tell components to reload myplaces data."
        }
      ],
      "request": [
        {
          "name": "MyPlaces.DeleteCategoryRequest",
          "path": "mapping/myplaces/request/MyPlaces.DeleteCategoryRequest.md",
          "file": "MyPlaces.DeleteCategoryRequest.md",
          "rpc": false,
          "desc": "Requests a \"my place\" maplayer/category to be deleted"
        },
        {
          "name": "MyPlaces.DeletePlaceRequest",
          "path": "mapping/myplaces/request/MyPlaces.DeletePlaceRequest.md",
          "file": "MyPlaces.DeletePlaceRequest.md",
          "rpc": false,
          "desc": "Requests a saved \"my place\" to be deleted"
        },
        {
          "name": "MyPlaces.EditCategoryRequest",
          "path": "mapping/myplaces/request/MyPlaces.EditCategoryRequest.md",
          "file": "MyPlaces.EditCategoryRequest.md",
          "rpc": false,
          "desc": "Requests a \"my place\" maplayer/category to be opened for editing"
        },
        {
          "name": "MyPlaces.EditPlaceRequest",
          "path": "mapping/myplaces/request/MyPlaces.EditPlaceRequest.md",
          "file": "MyPlaces.EditPlaceRequest.md",
          "rpc": false,
          "desc": "Requests a saved \"my place\" to be opened for editing"
        },
        {
          "name": "MyPlaces.OpenAddLayerDialogRequest",
          "path": "mapping/myplaces/request/MyPlaces.OpenAddLayerDialogRequest.md",
          "file": "MyPlaces.OpenAddLayerDialogRequest.md",
          "rpc": false,
          "desc": "Requests the add layer dialog to be opened"
        },
        {
          "name": "MyPlaces.PublishCategoryRequest",
          "path": "mapping/myplaces/request/MyPlaces.PublishCategoryRequest.md",
          "file": "MyPlaces.PublishCategoryRequest.md",
          "rpc": false,
          "desc": "Requests a \"my place\" maplayer/category to be made publishable or private"
        }
      ]
    },
    "myplacesimport": {
      "ns": "mapping",
      "name": "myplacesimport",
      "desc": "This bundle allows the user to import and save their own datas.",
      "path": "mapping\\myplacesimport\\bundle.md"
    },
    "printout": {
      "ns": "mapping",
      "name": "printout",
      "desc": "Manages settings panel when user has entered to the print mode.",
      "path": "mapping\\printout\\bundle.md",
      "event": [
        {
          "name": "Printout.PrintableContentEvent",
          "path": "mapping/printout/event/Printout.PrintableContentEvent.md",
          "file": "Printout.PrintableContentEvent.md",
          "rpc": false,
          "desc": "Set data for print"
        },
        {
          "name": "Printout.PrintCanceledEvent",
          "path": "mapping/printout/event/Printout.PrintCanceledEvent.md",
          "file": "Printout.PrintCanceledEvent.md",
          "rpc": false,
          "desc": "Used to notify components that the basic printout is canceled"
        },
        {
          "name": "Printout.PrintWithoutUIEvent",
          "path": "mapping/printout/event/Printout.PrintWithoutUIEvent.md",
          "file": "Printout.PrintWithoutUIEvent.md",
          "rpc": false,
          "desc": "Print pdf/png with predefined params without UI"
        }
      ],
      "request": [
        {
          "name": "printout.PrintMapRequest",
          "path": "mapping/printout/request/printout.PrintMapRequest.md",
          "file": "printout.PrintMapRequest.md",
          "rpc": false,
          "desc": "Starts/opens the UI for printout functionality like user had clicked the tool icon."
        }
      ]
    },
    "publishedmyplaces2": {
      "ns": "mapping",
      "name": "publishedmyplaces2",
      "desc": "My places functionality for a published map.\nEditing is not included, only creation and the default layer needs to be created by other means. Initial implementation and further development follows.",
      "path": "mapping\\publishedmyplaces2\\bundle.md"
    },
    "postprocessor": {
      "ns": "mapping",
      "name": "postprocessor",
      "desc": "Moves the map viewport to location defined in config and requests a highlight for featureId (also from config).",
      "path": "mapping\\postprocessor\\bundle.md"
    },
    "routingService": {
      "ns": "mapping",
      "name": "routingService",
      "desc": "Provides a service which listen ``GetRouteRequest`` request. When request has made the service send ajax call to Oskari backend and waiting to response. When response come then service sends ``RouteResultEvent``.",
      "path": "mapping\\routingService\\bundle.md",
      "event": [
        {
          "name": "RouteResultEvent ",
          "path": "mapping/routingService/event/routeresultevent.md",
          "file": "routeresultevent.md",
          "rpc": true,
          "desc": "Notifies that route has been got successfully from the service. Includes information about the route."
        }
      ],
      "request": [
        {
          "name": "GetRouteRequest ",
          "path": "mapping/routingService/request/getrouterequest.md",
          "file": "getrouterequest.md",
          "rpc": true,
          "desc": "Get route plan between two points."
        }
      ]
    },
    "routingui": {
      "ns": "mapping",
      "name": "routingui",
      "desc": "This bundle provides UI for routing. In this bundle user can select start and end points of route and then search route of between these points. Finally results are showed on the popup.",
      "path": "mapping\\routingui\\bundle.md"
    },
    "timeseries": {
      "ns": "mapping",
      "name": "timeseries",
      "desc": "![Timeseries](timeseries.png)",
      "path": "mapping\\timeseries\\bundle.md"
    },
    "userstyle": {
      "ns": "mapping",
      "name": "userstyle",
      "desc": "Provides functionality to add runtime styles for layer.",
      "path": "mapping\\userstyle\\bundle.md",
      "request": [
        {
          "name": "ShowUserStylesRequest",
          "path": "mapping/userstyle/request/ShowUserStylesRequest.md",
          "file": "ShowUserStylesRequest.md",
          "rpc": false,
          "desc": "Requests a user own styles to be shown for specific layer."
        }
      ]
    },
    "wfsvector": {
      "ns": "mapping",
      "name": "wfsvector",
      "desc": "WfsVectorLayerPlugin is an alternative implementation of mapwfs2 that uses MVT vector tiles or geojson as data transfer mechanism. \nRequires module `control-mvt` to be in use in the backend. Currently supports functionalities:",
      "path": "mapping\\wfsvector\\bundle.md",
      "request": [
        {
          "name": "WfsLayerPlugin.ActivateHighlightRequest",
          "path": "mapping/wfsvector/request/WfsLayerPlugin.ActivateHighlightRequest.md",
          "file": "WfsLayerPlugin.ActivateHighlightRequest.md",
          "rpc": false,
          "desc": "Requests a WFS highlight enabled or disabled"
        }
      ],
      "event": [
        {
          "name": "WFSFeatureEvent",
          "path": "mapping/wfsvector/event/WFSFeatureEvent.md",
          "file": "WFSFeatureEvent.md",
          "rpc": false,
          "desc": "Notifies about received WFS feature properties data"
        },
        {
          "name": "WFSFeaturesSelectedEvent",
          "path": "mapping/wfsvector/event/WFSFeaturesSelectedEvent.md",
          "file": "WFSFeaturesSelectedEvent.md",
          "rpc": false,
          "desc": "Used to indicate that a WFS Feature has been selected and components should highlight it in UI"
        },
        {
          "name": "WFSPropertiesEvent",
          "path": "mapping/wfsvector/event/WFSPropertiesEvent.md",
          "file": "WFSPropertiesEvent.md",
          "rpc": false,
          "desc": "Notifies about WFS feature properties field names\n "
        }
      ]
    }
  }
}